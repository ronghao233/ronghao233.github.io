<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>『数据结构』树</title>
      <link href="/posts/c400.html"/>
      <url>/posts/c400.html</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-%E6%A6%82%E5%BF%B5">1. 概念</a></li><li><a href="#2-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">2. 二叉查找树</a><ul><li><a href="#21-%E9%9A%8F%E6%9C%BA%E6%9E%84%E9%80%A0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">2.1. 随机构造的二叉查找树</a></li><li><a href="#22-%E5%B9%B3%E5%9D%87%E7%BB%93%E7%82%B9%E6%B7%B1%E5%BA%A6">2.2. 平均结点深度</a></li><li><a href="#23-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E6%95%B0%E7%9B%AEcatalan-num">2.3. 不同的二叉树数目(Catalan num)</a></li><li><a href="#24-%E5%A5%BD%E6%8B%AC%E5%8F%B7%E5%88%97">2.4. 好括号列</a><span id="more"></span></li></ul></li><li><a href="#3-%E5%9F%BA%E6%95%B0%E6%A0%91radixtree">3. 基数树(radixTree)</a></li><li><a href="#4-%E5%AD%97%E5%85%B8%E6%A0%91trie">4. 字典树(trie)</a><ul><li><a href="#41-ac-%E8%87%AA%E5%8A%A8%E6%9C%BA">4.1. AC 自动机</a></li></ul></li><li><a href="#5-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91">5. 平衡二叉树</a><ul><li><a href="#51-avl-tree">5.1. AVL Tree</a></li><li><a href="#52-splaytree">5.2. splayTree</a><ul><li><a href="#521-zig-step">5.2.1. Zig-step</a></li><li><a href="#522-zig-zig-step">5.2.2. Zig-zig step</a></li><li><a href="#523-zig-zag-step">5.2.3. Zig-zag step</a></li></ul></li><li><a href="#53-read-black-tree">5.3. read-black Tree</a></li><li><a href="#54-treap">5.4. treap</a></li></ul></li><li><a href="#6-%E6%80%BB%E7%BB%93">6. 总结</a></li><li><a href="#7-%E9%99%84%E4%BB%A3%E7%A0%81">7. 附代码</a><ul><li><a href="#71-%E4%BA%8C%E5%8F%89%E6%A0%91binarytree">7.1. 二叉树(binaryTree)</a></li><li><a href="#72-%E5%89%8D%E7%BC%80%E6%A0%91trie">7.2. 前缀树(Trie)</a></li><li><a href="#73-%E8%B5%A2%E8%80%85%E6%A0%91winnertree">7.3. 赢者树(winnerTree)</a></li><li><a href="#74-%E5%B7%A6%E6%96%9C%E5%A0%86">7.4. 左斜堆</a></li></ul></li></ul><!-- /TOC --><p><a id="markdown-1-概念" name="1-概念"></a></p><h1 id="1-概念">1. 1. 概念</h1><ul><li>双亲</li><li>左右孩子</li><li>左右子树</li><li>森林</li><li>结点,叶子,边,路径</li><li>高度 h</li><li>遍历(前中后层)</li><li>结点数 n</li></ul><p><a id="markdown-2-二叉查找树" name="2-二叉查找树"></a></p><h1 id="2-二叉查找树">2. 2. 二叉查找树</h1><p>又名排序二叉树,对于每个结点, 如果有,其左孩子不大于它,右孩子不小于它</p><p>通过前序遍历或者后序遍历就可以得到有序序列(升序,降序)</p><p>常用三种操作, 插入,删除,查找,时间复杂度是 <img src="https://latex.codecogs.com/gif.latex?O(h)"><br>h是树高, 但是由于插入,删除而导致树不平衡, 即可能 <img src="https://latex.codecogs.com/gif.latex?h%5Cgeqslant&space;%5Clfloor&space;logn&space;%5Crfloor"></p><p><a id="markdown-21-随机构造的二叉查找树" name="21-随机构造的二叉查找树"></a></p><h2 id="2-1-随机构造的二叉查找树">2.1. 2.1. 随机构造的二叉查找树</h2><p>下面可以证明,随机构造,即输入序列有 <img src="https://latex.codecogs.com/gif.latex?n!">中, 每种概率相同的情况下, 期望的树高 <img src="https://latex.codecogs.com/gif.latex?h=O(logn)"></p><p>(直接搬运算法导论上面的啦&gt;_&lt;)<br><img src="https://upload-images.jianshu.io/upload_images/7130568-69c57614410f6abd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><a id="markdown-22-平均结点深度" name="22-平均结点深度"></a></p><h2 id="2-2-平均结点深度">2.2. 2.2. 平均结点深度</h2><p>一个较 上面定理 弱的结论:</p><blockquote><p>一棵随机构造的二叉查找树,n 个结点的平均深度为 <img src="https://latex.codecogs.com/gif.latex?O(logn)"></p></blockquote><p>类似 RANDOMIZED-QUICKSORT 的证明过程, 因为快排 递归的过程就是一个递归 二叉树.<br>随机选择枢纽元就相当于这里的某个子树的根结点 在所有结点的大小随机排名, 如 i. 然后根结点将剩下的结点划分为左子树(i-1)个结点, 右子树(n-i)个结点.</p><p><img src="https://upload-images.jianshu.io/upload_images/7130568-6bf2b5a6d286adca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><a id="markdown-23-不同的二叉树数目catalan-num" name="23-不同的二叉树数目catalan-num"></a></p><h2 id="2-3-不同的二叉树数目-Catalan-num">2.3. 2.3. 不同的二叉树数目(Catalan num)</h2><p>给定<img src="https://latex.codecogs.com/gif.latex?%7B1,2,%5Cldots,n%7D">,组成二叉查找树的数目.<br>由上面的证明过程, 可以容易地分析得出, 任选第 i 个数作为根, 由于二叉查找树的性质, 其左子树<br>应该有 i-1个结点, 右子树有 n-i个结点.<br>如果记 n 个结点 的二叉查找树的数目为<img src="https://latex.codecogs.com/gif.latex?b_n"><br>则有递推公式<br><img src="https://latex.codecogs.com/gif.latex?&space;b_n=%5Cbegin%7Bcases%7D&space;1&space;&n=0&space;%5C&space;%5Csum_%7Bi=1%7D%5E%7Bn%7Db_%7Bi-1%7Db_%7Bn-i%7D&space;&&space;n%5Cgeqslant&space;1&space;%5Cend%7Bcases%7D&space;"><br>然后我们来看<code>&lt;&lt;算法导论&gt;&gt;</code>(p162,思考题12-4)上怎么求的吧( •̀ ω •́ )y<br>设生成函数<br><img src="https://latex.codecogs.com/gif.latex?B(x)=%5Csum_%7Bn=0%7D%5E%7B%5Cinfty%7Db_n&space;x%5En"><br>下面证明<img src="https://latex.codecogs.com/gif.latex?B(x)=xB(x)%5E2+1"><br>易得<img src="https://latex.codecogs.com/gif.latex?xB(x)%5E2=%5Csum_%7Bi=1%7D%5E%7B%5Cinfty%7D%5Csum_%7Bn=i%7D%5E%7B%5Cinfty%7Db_%7Bi-1%7Db_%7Bn-i%7Dx%5En"><br>对比<img src="https://latex.codecogs.com/gif.latex?B(x),&space;xB(x)%5E2+1">的 x 的各次系数,分别是 <img src="https://latex.codecogs.com/gif.latex?b_k,a_%7Bk%7D"><br>当 k&#x3D;0, <img src="https://latex.codecogs.com/gif.latex?a_k=1=b_k"><br>当 k&gt;0<br><img src="https://latex.codecogs.com/gif.latex?a_%7Bk%7D&space;=&space;%5Csum_%7Bi=1%7D%5E%7Bk%7Db_%7Bi-1%7Db_%7Bk-i%7D&space;=&space;b_k"><br>所以<img src="https://latex.codecogs.com/gif.latex?B(x)=xB(x)%5E2+1"><br>由此解得<br><img src="https://latex.codecogs.com/gif.latex?B(x)=%5Cfrac%7B1-%5Csqrt%7B1-4x%7D&space;%7D%7B2x%7D"><br>在点 x&#x3D;0 处,<br>用泰勒公式得<br><img src="https://latex.codecogs.com/gif.latex?&space;%5Cbegin%7Baligned%7D&space;%5Clim_%7Bx%5Cto&space;0%7D%5Csqrt%7B1-4x%7D&=1+%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7DC_n%5E%7B%5Cfrac%7B1%7D%7B2%7D%7D%7B(-4)%7D%5Enx%5En&space;%5C&space;&=1+%5Csum_%7Bn=1%7D%5E%7B%5Cinfty%7D%5Cfrac%7B(2n-3)!!%7B(-4x)%7D%5En%7D%7Bn!%7D&space;%5Cend%7Baligned%7D&space;"><br>所以对应系数<br><img src="https://latex.codecogs.com/gif.latex?&space;%5Cbegin%7Baligned%7D&space;b_n&=%5Cfrac%7B1%7D%7B2%7D%5Cfrac%7B4%5E%7Bn+1%7D(2n-1)!!%7D%7B2%5E%7Bn+1%7Dn!%7D&space;%5C&space;&=%5Cfrac%7BC_%7B2n%7D%5E%7Bn%7D%7D%7Bn+1%7D&space;%5Cend%7Baligned%7D&space;"><br>这个数叫做 <code>Catalan 数</code><br><a id="markdown-24-好括号列" name="24-好括号列"></a></p><h2 id="2-4-好括号列">2.4. 2.4. 好括号列</h2><p>王树禾的<code>&lt;&lt;图论&gt;&gt;</code>(p42)上用另外的方法给出Catalan数, 并求出n结点 二叉查找数的个数</p><p>首先定义好括号列,有:</p><ul><li>空列,即没有括号叫做好括号列</li><li>若A,B都是好括号列, 则串联后 AB是好括号列</li><li>若A是好括号列, 则 (A)是好括号列</li></ul><blockquote><p>充要条件: 好括号列 <img src="https://latex.codecogs.com/gif.latex?%5CLongleftrightarrow"> 左右括号数相等, 且从左向右看, 看到的右括号数不超过左括号数</p></blockquote><blockquote><p>定理: 由 n个左括号,n个右括号组成的好括号列个数为<img src="https://latex.codecogs.com/gif.latex?c(n)=%5Cfrac%7BC_%7B2n%7D%5E%7Bn%7D%7D%7Bn+1%7D"></p></blockquote><p>证明:<br>由 n左n右组成的括号列有 <img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B2n%7D%7Bn!n!%7D=C_%7B2n%7D%5E%7Bn%7D">个.<br> 设括号列<img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7B2n%7D">为坏括号列,<br>由充要条件, 存在最小的 j, 使得<img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7Bj%7D">中右括号比左括号多一个,<br>由于是最小的 j, 所以 <img src="https://latex.codecogs.com/gif.latex?a_j">为右括号, <img src="https://latex.codecogs.com/gif.latex?a_%7Bj+1%7D">为右括号<br>把<img src="https://latex.codecogs.com/gif.latex?a_%7Bj+1%7Da_%7Bj+2%7D%5Cldots&space;a_%7B2n%7D">中的左括号变为右括号, 右变左,记为<img src="https://latex.codecogs.com/gif.latex?%5Cbar&space;a_%7Bj+1%7D%5Cbar&space;a_%7Bj+2%7D%5Cldots&space;%5Cbar&space;a_%7B2n%7D"></p><p>则括号列<img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7Bj%7D%5Cbar&space;a_%7Bj+1%7D">为好括号列<br><img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7Bj%7D%5Cbar&space;a_%7Bj+1%7D%5Cbar&space;a_%7Bj+2%7D%5Cldots&space;%5Cbar&space;a_%7B2n%7D">可好可坏,且有n-1个右,n+1个左, 共有<img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B2n%7D%7B(n+1)!(n-1)!%7D=C_%7B2n%7D%5E%7Bn+1%7D">个.</p><p>所以坏括号列<img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7B2n%7D"> 与括号列 <img src="https://latex.codecogs.com/gif.latex?a_1a_2%5Cldots&space;a_%7Bj%7D%5Cbar&space;a_%7Bj+1%7D%5Cbar&space;a_%7Bj+2%7D%5Cldots&space;%5Cbar&space;a_%7B2n%7D">, 有<img src="https://latex.codecogs.com/gif.latex?%5Cfrac%7B2n%7D%7B(n+1)!(n-1)!%7D=C_%7B2n%7D%5E%7Bn+1%7D">个</p><p>那么好括号列有<br><img src="https://latex.codecogs.com/gif.latex?&space;c(n)=C_%7B2n%7D%5E%7Bn%7D&space;-&space;C_%7B2n%7D%5E%7Bn+1%7D&space;=%5Cfrac%7BC_%7B2n%7D%5E%7Bn%7D%7D%7Bn+1%7D&space;"></p><blockquote><p>推论: n个字符,进栈出栈(出栈可以在栈不为空的时候随时进行), 则出栈序列有 c(n)种</p></blockquote><p>这种先入后出的情形都是这样<br><img src="https://upload-images.jianshu.io/upload_images/7130568-235b542c14b6c82b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><a id="markdown-3-基数树radixtree" name="3-基数树radixtree"></a></p><h1 id="3-基数树-radixTree">3. 3. 基数树(radixTree)</h1><p><img src="https://upload-images.jianshu.io/upload_images/7130568-cc84ec3ffd7c3d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br><a id="markdown-4-字典树trie" name="4-字典树trie"></a></p><h1 id="4-字典树-trie">4. 4. 字典树(trie)</h1><p>又叫<code>前缀树</code>(preifx tree).适用于储存有公共前缀的字符串集合. 如果直接储存, 而很多字符串有公共前缀, 会浪费掉存储空间.<br>字典树可以看成是基数树的变形, 每个结点可以有多个孩子, 每个结点存储的是一个字符, 从根沿着结点走到一个结点,走过的路径形成字符序列, 如果有合适的单词就可以输出.</p><p>当然,也可以同理得出后缀树<br><a id="markdown-41-ac-自动机" name="41-ac-自动机"></a></p><h2 id="4-1-AC-自动机">4.1. 4.1. AC 自动机</h2><p>Aho-Corasick automation,是在字典树上添加匹配失败边(失配指针), 实现字符串搜索匹配的算法.<br><img src="https://upload-images.jianshu.io/upload_images/7130568-3a6ff51c0bdd0ee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>图中蓝色结点 表示存在字符串, 灰色表示不存在.<br>黑色边是父亲到子结点的边, 蓝色边就是<code>失配指针</code>.</p><p>蓝色边(终点称为起点的后缀结点): 连接字符串<strong>终点</strong>到在<strong>图中存在的</strong>, <strong>最长</strong>严格后缀的结点. 如 caa 的严格后缀为 aa,a, 空. 而在图中存在, 且最长的是字符串  a, 则连接到这个字符串的终点 a.</p><p>绿色边(字典后缀结点): 终点是起点经过蓝色有向边到达的第一个蓝色结点.</p><p>下面摘自 <code>wiki</code></p><blockquote><p>在每一步中，算法先查找当前节点的 “孩子节点”，如果没有找到匹配，查找它的后缀节点(suffix) 的孩子，如果仍然没有，接着查找后缀节点的后缀节点的孩子, 如此循环, 直到根结点，如果到达根节点仍没有找到匹配则结束。</p><p>当算法查找到一个节点，则输出所有结束在当前位置的字典项。输出步骤为首先找到该节点的字典后缀，然后用递归的方式一直执行到节点没有字典前缀为止。同时，如果该节点为一个字典节点，则输出该节点本身。</p><p>输入 abccab 后算法的执行步骤如下：<br><img src="https://upload-images.jianshu.io/upload_images/7130568-85329df49fa54685.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p></blockquote><p><a id="markdown-5-平衡二叉树" name="5-平衡二叉树"></a></p><h1 id="5-平衡二叉树">5. 5. 平衡二叉树</h1><p>上面的二叉查找树不平衡,即经过多次插入,删除后,  其高度变化大, 不能保持<img src="https://latex.codecogs.com/gif.latex?%5CTheta(n)">的性能<br>而平衡二叉树就能.<br>平衡二叉树都是经过一些旋转操作, 使左右子树的结点高度相差不大,达到平衡<br> 有如下几种<br><a id="markdown-51-avl-tree" name="51-avl-tree"></a></p><h2 id="5-1-AVL-Tree">5.1. 5.1. AVL Tree</h2><p><code>平衡因子</code>: 右子树高度 - 左子树高度<br>定义: 每个结点的平衡因子属于{0,-1,1}<br><img src="https://upload-images.jianshu.io/upload_images/7130568-aaf92117118f8773.gif?imageMogr2/auto-orient/strip" alt="AVL_Tree_Example(from wiki).gif"></p><p><img src="https://upload-images.jianshu.io/upload_images/7130568-d3552412c97bc9a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="from wiki"></p><p><a id="markdown-52-splaytree" name="52-splaytree"></a></p><h2 id="5-2-splayTree">5.2. 5.2. splayTree</h2><p>伸展树, 它的特点是每次将访问的结点通过旋转旋转到根结点.<br>其实它并不平衡. 但是插入,查找,删除操作 的平摊时间是<img src="https://latex.codecogs.com/gif.latex?O(logn)"><br>有三种旋转,下面都是将访问过的 x 旋转到 根部<br><a id="markdown-521-zig-step" name="521-zig-step"></a></p><h3 id="5-2-1-Zig-step">5.2.1. 5.2.1. Zig-step</h3><p><img src="https://upload-images.jianshu.io/upload_images/7130568-747a88861d7acde8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zig"><br><a id="markdown-522-zig-zig-step" name="522-zig-zig-step"></a></p><h3 id="5-2-2-Zig-zig-step">5.2.2. 5.2.2. Zig-zig step</h3><p><img src="https://upload-images.jianshu.io/upload_images/7130568-8a688b1a66a3da21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zig-zig"><br><a id="markdown-523-zig-zag-step" name="523-zig-zag-step"></a></p><h3 id="5-2-3-Zig-zag-step">5.2.3. 5.2.3. Zig-zag step</h3><p><img src="https://upload-images.jianshu.io/upload_images/7130568-c3d7e8aeb7c834ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="zig-zag"><br><a id="markdown-53-read-black-tree" name="53-read-black-tree"></a></p><h2 id="5-3-read-black-Tree">5.3. 5.3. read-black Tree</h2><p>同样是平衡的二叉树, 以后单独写一篇关于红黑树的.</p><p><a id="markdown-54-treap" name="54-treap"></a></p><h2 id="5-4-treap">5.4. 5.4. treap</h2><p><a href="#21-%E9%9A%8F%E6%9C%BA%E6%9E%84%E9%80%A0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">前面提到</a>, 随机构造的二叉查找树高度为 <img src="https://latex.codecogs.com/gif.latex?h=O(logn)">,以及在<a href="/alg-genral.html">算法 general</a> 中说明了怎样 随机化(shuffle)一个给定的序列.</p><p>所以,为了得到一个平衡的二叉排序树,我们可以将给定的序列随机化, 然后再进行构造二叉排序树.</p><p>但是如果不能一次得到全部的数据,也就是可能插入新的数据的时候,该怎么办呢? 可以证明,满足下面的条件构造的结构相当于同时得到全部数据, 也就是随机化的二叉查找树.</p><p><img src="https://upload-images.jianshu.io/upload_images/7130568-f8fd5006a58ce451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="treap"></p><p>这种结构叫 <code>treap</code>, 不仅有要排序的关键字 key, 还有随机生成的,各不相等的关键字<code>priority</code>,代表插入的顺序.</p><ul><li>二叉查找树的排序性质: 双亲结点的 key 大于左孩子,小于右孩子</li><li>最小(大)堆的堆序性质: 双亲的 prority小于(大于) 孩子的 prority</li></ul><p>插入的实现: 先进行二叉查找树的插入,成为叶子结点, 再通过旋转 实现 <code>上浮</code>(堆中术语).<br>将先排序 key, 再排序 prority(排序prority 时通过旋转保持 key 的排序)</p><p><a id="markdown-6-总结" name="6-总结"></a></p><h1 id="6-总结">6. 6. 总结</h1><p>还有很多有趣的树结构,<br>比如斜堆, 竞赛树(赢者树,输者树,线段树, 索引树,B树, fingerTree(不知道是不是译为手指树233)…<br>这里就不详细介绍了, 如果以后有时间,可能挑几个单独写一篇文章</p><p><a id="markdown-7-附代码" name="7-附代码"></a></p><h1 id="7-附代码">7. 7. 附代码</h1><p><strong><a href="https://github.com/mbinary/algorithm-in-python.git">github地址</a></strong></p><p><a id="markdown-71-二叉树binarytree" name="71-二叉树binarytree"></a></p><h2 id="7-1-二叉树-binaryTree">7.1. 7.1. 二叉树(binaryTree)</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> total_ordering@total_ordering<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">,</span>left<span class="token operator">=</span>None<span class="token punctuation">,</span>right<span class="token operator">=</span>None<span class="token punctuation">,</span>freq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val<span class="token operator">=</span>val        self<span class="token punctuation">.</span>left<span class="token operator">=</span>left        self<span class="token punctuation">.</span>right<span class="token operator">=</span>right        self<span class="token punctuation">.</span>freq <span class="token operator">=</span> freq    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>nd<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>val<span class="token operator">==</span>nd<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'node(&amp;#123;&amp;#125;)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">binaryTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root<span class="token operator">=</span>None    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">_add</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span>newNode<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nd<span class="token operator">&lt;</span>newNode<span class="token punctuation">:</span>                <span class="token keyword">if</span> nd<span class="token punctuation">.</span>right <span class="token keyword">is</span> None<span class="token punctuation">:</span>nd<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode                <span class="token keyword">else</span><span class="token punctuation">:</span>_add<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>right<span class="token punctuation">,</span>newNode<span class="token punctuation">)</span>            <span class="token keyword">elif</span> nd<span class="token operator">></span>newNode<span class="token punctuation">:</span>                <span class="token keyword">if</span> nd<span class="token punctuation">.</span>left <span class="token keyword">is</span> None<span class="token punctuation">:</span>nd<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode                <span class="token keyword">else</span> <span class="token punctuation">:</span> _add<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>left<span class="token punctuation">,</span>newNode<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>nd<span class="token punctuation">.</span>freq <span class="token operator">+=</span><span class="token number">1</span>        _add<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>node<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>        prt<span class="token operator">=</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>node<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        <span class="token keyword">if</span> prt<span class="token punctuation">.</span>left <span class="token operator">and</span> prt<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> prt<span class="token punctuation">.</span>left        <span class="token keyword">elif</span>  prt<span class="token punctuation">.</span>right <span class="token operator">and</span> prt<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">:</span><span class="token keyword">return</span> prt<span class="token punctuation">.</span>right        <span class="token keyword">else</span> <span class="token punctuation">:</span><span class="token keyword">return</span> None    <span class="token keyword">def</span> <span class="token function">_findPrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>tgt<span class="token punctuation">,</span>prt<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> nd<span class="token operator">==</span>tgt <span class="token operator">or</span> nd <span class="token keyword">is</span> None<span class="token punctuation">:</span><span class="token keyword">return</span> prt        <span class="token keyword">elif</span> nd<span class="token operator">&lt;</span>tgt<span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>right<span class="token punctuation">,</span>tgt<span class="token punctuation">,</span>nd<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>left<span class="token punctuation">,</span>tgt<span class="token punctuation">,</span>nd<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>        prt<span class="token operator">=</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>node<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        <span class="token keyword">if</span> prt<span class="token punctuation">.</span>left <span class="token operator">and</span> prt<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">:</span>            l<span class="token operator">=</span>prt<span class="token punctuation">.</span>left            <span class="token keyword">if</span> l<span class="token punctuation">.</span>left <span class="token keyword">is</span> None<span class="token punctuation">:</span>prt<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">.</span>right            <span class="token keyword">elif</span> l<span class="token punctuation">.</span>right <span class="token keyword">is</span> None <span class="token punctuation">:</span> prt<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                nd <span class="token operator">=</span> l<span class="token punctuation">.</span>left                <span class="token keyword">while</span> nd<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>nd <span class="token operator">=</span> nd<span class="token punctuation">.</span>right                nd<span class="token punctuation">.</span>right <span class="token operator">=</span> l<span class="token punctuation">.</span>right                prt<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">.</span>left        <span class="token keyword">elif</span>  prt<span class="token punctuation">.</span>right <span class="token operator">and</span> prt<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">:</span>            r<span class="token operator">=</span>prt<span class="token punctuation">.</span>right            <span class="token keyword">if</span> r<span class="token punctuation">.</span>right <span class="token keyword">is</span> None<span class="token punctuation">:</span>prt<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">.</span>right            <span class="token keyword">elif</span> r<span class="token punctuation">.</span>right <span class="token keyword">is</span> None <span class="token punctuation">:</span> prt<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                nd <span class="token operator">=</span> r<span class="token punctuation">.</span>left                <span class="token keyword">while</span> nd<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>nd <span class="token operator">=</span> nd<span class="token punctuation">.</span>right                nd<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">.</span>right                prt<span class="token punctuation">.</span>left <span class="token operator">=</span> r<span class="token punctuation">.</span>left    <span class="token keyword">def</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">_p</span><span class="token punctuation">(</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nd <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>nd<span class="token punctuation">)</span>                _p<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                _p<span class="token punctuation">(</span>nd<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        _p<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">)</span></code></pre><p><a id="markdown-72-前缀树trie" name="72-前缀树trie"></a></p><h2 id="7-2-前缀树-Trie">7.2. 7.2. 前缀树(Trie)</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>isKey <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> iter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>children<span class="token operator">!=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'val: '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\nchildren: '</span><span class="token operator">+</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> str<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root<span class="token operator">=</span>node<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dic <span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'insert':self.insert,'startsWith':self.startsWith,'search':self.search&amp;#125;</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Inserts a word into the trie.        :type word: str        :rtype: void        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> word<span class="token punctuation">:</span><span class="token keyword">return</span>        nd <span class="token operator">=</span> self<span class="token punctuation">.</span>root        <span class="token keyword">for</span> i <span class="token keyword">in</span> word<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> nd<span class="token punctuation">:</span>                nd <span class="token operator">=</span> nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                newNode<span class="token operator">=</span> node<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode                nd <span class="token operator">=</span> newNode        <span class="token keyword">else</span><span class="token punctuation">:</span>nd<span class="token punctuation">.</span>isKey <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">,</span>matchAll<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""support matchall function  eg,  'p.d' matchs 'pad' , 'pid'        """</span>        self<span class="token punctuation">.</span>matchAll <span class="token operator">=</span> <span class="token string">'.'</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_search<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>word<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> idx<span class="token punctuation">,</span>i <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>self<span class="token punctuation">.</span>matchAll <span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> nd<span class="token punctuation">:</span>                    bl <span class="token operator">=</span>self<span class="token punctuation">.</span>_search<span class="token punctuation">(</span>nd<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>word<span class="token punctuation">[</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> bl<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> i  <span class="token keyword">in</span> nd<span class="token punctuation">:</span>                nd <span class="token operator">=</span> nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> nd<span class="token punctuation">.</span>isKey    <span class="token keyword">def</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Returns if there is any word in the trie that starts with the given prefix.        :type prefix: str        :rtype: bool        """</span>        nd <span class="token operator">=</span> self<span class="token punctuation">.</span>root        <span class="token keyword">for</span> i <span class="token keyword">in</span> prefix<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span>  nd<span class="token punctuation">:</span>                nd<span class="token operator">=</span> nd<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'preOrderTraverse  data of the Trie'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>preOrder<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        s<span class="token operator">=</span>s<span class="token operator">+</span>root<span class="token punctuation">.</span>val        <span class="token keyword">if</span>  root<span class="token punctuation">.</span>isKey<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>preOrder<span class="token punctuation">(</span>root<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span></code></pre><p><a id="markdown-73-赢者树winnertree" name="73-赢者树winnertree"></a></p><h2 id="7-3-赢者树-winnerTree">7.3. 7.3. 赢者树(winnerTree)</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">winnerTree</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''if i&lt;lowExt    p = (i+offset)//2       else           p = (i+n-1-lowExt)//2       offset is a num 2^k-1 just bigger than n        p is the index of tree        i is the index of players        lowExt is the double node num of the lowest layer of the tree    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>players<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n<span class="token operator">=</span>len<span class="token punctuation">(</span>players<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>self<span class="token punctuation">.</span>n        players<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>players<span class="token operator">=</span>players        self<span class="token punctuation">.</span>reverse<span class="token operator">=</span>reverse        self<span class="token punctuation">.</span>getNum<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initTree<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getNum</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">while</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">&lt;</span> self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span>        <span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">==</span>self<span class="token punctuation">.</span> n<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>lowExt<span class="token operator">=</span><span class="token number">0</span>            self<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token number">-1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>lowExt <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>            self<span class="token punctuation">.</span>s <span class="token operator">=</span> i<span class="token number">-1</span>        self<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token number">-1</span>    <span class="token keyword">def</span> <span class="token function">treeToArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">-</span>self<span class="token punctuation">.</span>offset <span class="token keyword">if</span> p<span class="token operator">></span>self<span class="token punctuation">.</span>s <span class="token keyword">else</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span>self<span class="token punctuation">.</span>lowExt<span class="token operator">-</span>self<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">arrayToTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>self<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span> <span class="token keyword">if</span> i<span class="token operator">&lt;=</span>self<span class="token punctuation">.</span>lowExt <span class="token keyword">else</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>self<span class="token punctuation">.</span>lowExt<span class="token operator">+</span> self<span class="token punctuation">.</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">win</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b <span class="token keyword">if</span> self<span class="token punctuation">.</span>reverse <span class="token keyword">else</span> a<span class="token operator">></span>b    <span class="token keyword">def</span> <span class="token function">initTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token operator">>=</span>self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>            delta <span class="token operator">=</span> p<span class="token operator">%</span><span class="token number">2</span>  <span class="token comment" spellcheck="true">#!!! good job  notice delta mark the lchild or rchlid</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>self<span class="token punctuation">.</span>treeToArray<span class="token punctuation">(</span>p<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>delta<span class="token punctuation">]</span>        l <span class="token operator">=</span> self<span class="token punctuation">.</span>initTree<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token punctuation">)</span>        r <span class="token operator">=</span> self<span class="token punctuation">.</span>initTree<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> l <span class="token keyword">if</span> self<span class="token punctuation">.</span>win<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">else</span> r        <span class="token keyword">return</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">winner</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        idx <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token number">2</span><span class="token operator">*</span>idx<span class="token operator">&lt;</span>self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>            idx <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>idx <span class="token keyword">if</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">else</span> idx<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>        num <span class="token operator">=</span> self<span class="token punctuation">.</span>treeToArray<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>        num <span class="token operator">=</span> num<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> num        <span class="token keyword">return</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>num    <span class="token keyword">def</span> <span class="token function">getOppo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>        oppo<span class="token operator">=</span>None        <span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">&lt;</span>self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>oppo<span class="token operator">=</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token punctuation">]</span>        <span class="token keyword">elif</span> i<span class="token operator">&lt;=</span>self<span class="token punctuation">.</span>lowExt<span class="token punctuation">:</span>oppo<span class="token operator">=</span>self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token operator">+</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            lpl<span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span>self<span class="token punctuation">.</span>lowExt<span class="token operator">-</span>self<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            oppo <span class="token operator">=</span> lpl <span class="token keyword">if</span> lpl<span class="token operator">!=</span>x <span class="token keyword">else</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span>self<span class="token punctuation">.</span>lowExt<span class="token operator">-</span>self<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> oppo    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>i<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">''' i is 1-indexed  which is the num of player            and x is the new val of the player '''</span>        self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x        p <span class="token operator">=</span> self<span class="token punctuation">.</span>arrayToTree<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        oppo <span class="token operator">=</span>self<span class="token punctuation">.</span>getOppo<span class="token punctuation">(</span>i<span class="token punctuation">,</span>x<span class="token punctuation">,</span>p<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token keyword">if</span> self<span class="token punctuation">.</span>win<span class="token punctuation">(</span>x<span class="token punctuation">,</span>oppo<span class="token punctuation">)</span> <span class="token keyword">else</span> oppo        p<span class="token operator">=</span>p<span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            l <span class="token operator">=</span> self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span>            r <span class="token operator">=</span> None            <span class="token keyword">if</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>n<span class="token punctuation">:</span>r<span class="token operator">=</span>self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#notice this !!!</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>r <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span>self<span class="token punctuation">.</span>lowExt<span class="token operator">-</span>self<span class="token punctuation">.</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> l <span class="token keyword">if</span> self<span class="token punctuation">.</span>win<span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span> <span class="token keyword">else</span> r            p<span class="token operator">=</span>p<span class="token operator">//</span><span class="token number">2</span></code></pre><p><a id="markdown-74-左斜堆" name="74-左斜堆"></a></p><h2 id="7-4-左斜堆">7.4. 7.4. 左斜堆</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> total_ordering@total_ordering<span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>val<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token operator">=</span>None<span class="token punctuation">,</span>right<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val<span class="token operator">=</span>val        self<span class="token punctuation">.</span>freq<span class="token operator">=</span>freq        self<span class="token punctuation">.</span>s<span class="token operator">=</span>s        <span class="token keyword">if</span> left <span class="token keyword">is</span> None <span class="token operator">or</span> right <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token keyword">if</span> left <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> right            self<span class="token punctuation">.</span>right <span class="token operator">=</span>None        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">.</span>s<span class="token operator">&lt;</span>right<span class="token punctuation">.</span>s<span class="token punctuation">:</span>                left<span class="token punctuation">,</span>right <span class="token operator">=</span>right<span class="token punctuation">,</span> left            self<span class="token punctuation">.</span>left<span class="token operator">=</span>left            self<span class="token punctuation">.</span>right<span class="token operator">=</span>right            self<span class="token punctuation">.</span>s<span class="token operator">+=</span>self<span class="token punctuation">.</span>right<span class="token punctuation">.</span>s    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>val<span class="token operator">==</span>nd<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>nd<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'node(val=%d,freq=%d,s=%d)'</span><span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>val<span class="token punctuation">,</span>self<span class="token punctuation">.</span>freq<span class="token punctuation">,</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">leftHeap</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root<span class="token operator">=</span>root    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token operator">not</span> None    @staticmethod    <span class="token keyword">def</span> <span class="token function">_merge</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#-> int</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span><span class="token keyword">return</span> t        <span class="token keyword">if</span> t <span class="token keyword">is</span> None<span class="token punctuation">:</span><span class="token keyword">return</span> root        <span class="token keyword">if</span> root<span class="token operator">&lt;</span>t<span class="token punctuation">:</span>            root<span class="token punctuation">,</span>t<span class="token operator">=</span>t<span class="token punctuation">,</span>root        root<span class="token punctuation">.</span>right <span class="token operator">=</span> leftHeap<span class="token punctuation">.</span>_merge<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> None <span class="token operator">or</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> None<span class="token punctuation">:</span>            root<span class="token punctuation">.</span>s<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> None<span class="token punctuation">:</span>                root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>None        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>s<span class="token operator">&lt;</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>s<span class="token punctuation">:</span>                root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left            root<span class="token punctuation">.</span>s <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>s<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">return</span> root    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>nd<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>nd <span class="token operator">=</span> node<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root<span class="token operator">=</span>nd            <span class="token keyword">return</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root<span class="token operator">==</span>nd<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>freq<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span>        prt <span class="token operator">=</span>self<span class="token punctuation">.</span> _findPrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>None<span class="token punctuation">)</span>        <span class="token keyword">if</span> prt <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root<span class="token operator">=</span>leftHeap<span class="token punctuation">.</span>_merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>nd<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> prt<span class="token punctuation">.</span>left<span class="token operator">==</span>nd<span class="token punctuation">:</span>                prt<span class="token punctuation">.</span>left<span class="token punctuation">.</span>freq<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>prt<span class="token punctuation">.</span>right<span class="token punctuation">.</span>freq<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>nd<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>nd <span class="token operator">=</span> node<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root<span class="token operator">==</span>nd<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root<span class="token operator">=</span>leftHeap<span class="token punctuation">.</span>_merge<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            prt <span class="token operator">=</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>None<span class="token punctuation">)</span>            <span class="token keyword">if</span> prt <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                <span class="token keyword">if</span> prt<span class="token punctuation">.</span>left<span class="token operator">==</span>nd<span class="token punctuation">:</span>                    prt<span class="token punctuation">.</span>left<span class="token operator">=</span>leftHeap<span class="token punctuation">.</span>_merge<span class="token punctuation">(</span>prt<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span>prt<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    prt<span class="token punctuation">.</span>right<span class="token operator">=</span>leftHeap<span class="token punctuation">.</span>_merge<span class="token punctuation">(</span>prt<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">,</span>prt<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>nd<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>nd <span class="token operator">=</span> node<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>        prt <span class="token operator">=</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>self<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        <span class="token keyword">if</span> prt <span class="token keyword">is</span> None <span class="token operator">or</span> prt<span class="token operator">==</span>nd<span class="token punctuation">:</span><span class="token keyword">return</span> prt        <span class="token keyword">elif</span> prt<span class="token punctuation">.</span>left<span class="token operator">==</span>nd<span class="token punctuation">:</span><span class="token keyword">return</span> prt<span class="token punctuation">.</span>left        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> prt<span class="token punctuation">.</span>right    <span class="token keyword">def</span> <span class="token function">_findPrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>parent<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>nd<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>nd <span class="token operator">=</span> node<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None <span class="token operator">or</span> root<span class="token operator">&lt;</span>nd<span class="token punctuation">:</span><span class="token keyword">return</span> None        <span class="token keyword">if</span> root<span class="token operator">==</span>nd<span class="token punctuation">:</span><span class="token keyword">return</span> parent        l<span class="token operator">=</span>self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span>  l <span class="token keyword">if</span> l <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> self<span class="token punctuation">.</span>_findPrt<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>nd<span class="token punctuation">,</span>root<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">getTop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>root    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        nd <span class="token operator">=</span> self<span class="token punctuation">.</span>root        self<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> nd    <span class="token keyword">def</span> <span class="token function">levelTraverse</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        cur<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> li<span class="token punctuation">:</span>            nd<span class="token punctuation">,</span>lv <span class="token operator">=</span> li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> cur<span class="token operator">&lt;</span>lv<span class="token punctuation">:</span>                cur<span class="token operator">=</span>lv                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>nd<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nd<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>nd<span class="token punctuation">.</span>left<span class="token punctuation">,</span>lv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nd<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>nd<span class="token punctuation">.</span>right<span class="token punctuation">,</span>lv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法设计与分析彭攀链接</title>
      <link href="/posts/3a14.html"/>
      <url>/posts/3a14.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://live.eeo.cn/pc.html?lessonKey=81506cc37134d3cb">https://live.eeo.cn/pc.html?lessonKey=81506cc37134d3cb</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=b69658611a616999">https://live.eeo.cn/pc.html?lessonKey=b69658611a616999</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=965646050319f2e0">https://live.eeo.cn/pc.html?lessonKey=965646050319f2e0</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=c2c9b15a88761263">https://live.eeo.cn/pc.html?lessonKey=c2c9b15a88761263</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=8bada826ea07b88f">https://live.eeo.cn/pc.html?lessonKey=8bada826ea07b88f</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=d5709ec110ff49f2">https://live.eeo.cn/pc.html?lessonKey=d5709ec110ff49f2</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=f306515003788e46">https://live.eeo.cn/pc.html?lessonKey=f306515003788e46</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=0dbbb90d7cb6d77c">https://live.eeo.cn/pc.html?lessonKey=0dbbb90d7cb6d77c</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=f07d23cacc3f3ec6">https://live.eeo.cn/pc.html?lessonKey=f07d23cacc3f3ec6</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=9f0b4314f19944c8">https://live.eeo.cn/pc.html?lessonKey=9f0b4314f19944c8</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=d911a32c5712cdfb">https://live.eeo.cn/pc.html?lessonKey=d911a32c5712cdfb</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=169876844f6b22d5">https://live.eeo.cn/pc.html?lessonKey=169876844f6b22d5</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=19610516339b29f5">https://live.eeo.cn/pc.html?lessonKey=19610516339b29f5</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=0fff131e1dd0cae0">https://live.eeo.cn/pc.html?lessonKey=0fff131e1dd0cae0</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=7014e20907253afa">https://live.eeo.cn/pc.html?lessonKey=7014e20907253afa</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=43555dc22021b035">https://live.eeo.cn/pc.html?lessonKey=43555dc22021b035</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=a4c78add3dd852b4">https://live.eeo.cn/pc.html?lessonKey=a4c78add3dd852b4</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=73951a0fbf23f38e">https://live.eeo.cn/pc.html?lessonKey=73951a0fbf23f38e</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=a0f25C10973c2f4b">https://live.eeo.cn/pc.html?lessonKey=a0f25C10973c2f4b</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=089d5f7e212fd95e">https://live.eeo.cn/pc.html?lessonKey=089d5f7e212fd95e</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=143fdf02b7047f1c">https://live.eeo.cn/pc.html?lessonKey=143fdf02b7047f1c</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=d80dbc85760fb14a">https://live.eeo.cn/pc.html?lessonKey=d80dbc85760fb14a</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=7ad8b74551b01933">https://live.eeo.cn/pc.html?lessonKey=7ad8b74551b01933</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=ba1e536989909bd7">https://live.eeo.cn/pc.html?lessonKey=ba1e536989909bd7</a></p><p><a href="https://live.eeo.cn/pc.html?lessonKey=679aad0ee2701f48">https://live.eeo.cn/pc.html?lessonKey=679aad0ee2701f48</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 中科大课程链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github+飞书，手把手从0搭建博客</title>
      <link href="/posts/1fb7.html"/>
      <url>/posts/1fb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客本地部署">1. 博客本地部署</h1><h2 id="安装-git">1.1. 安装 git</h2><p><a href="http://git-scm.com/download">Git 客户端</a>:<br>作用：把本地的 hexo 内容提交到 github 上去</p><p>安装过程无脑下一步，出现下面的就是安装成功。</p><!-- ![](static1/boxcncDmmuuYYHQjyPWNDDXzYlb.png) --><img src="/static1/boxcncDmmuuYYHQjyPWNDDXzYlb.png" width="150" height="150"><h2 id="Node-js-环境安装">1.2. Node.js 环境安装</h2><p>Hexo 是基于 node.js 编写的，所以需要安装一下 nodeJs 和里面的 npm 工具。</p><p>Windows：<u>官网</u>下载安装即可</p><p>Linux:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Debian/Ubuntu等系统</span>yum <span class="token function">install</span> nodejsyum <span class="token function">install</span> <span class="token function">npm</span><span class="token comment" spellcheck="true"># Centos/RedHat等系统apt-get install nodejs</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>Mac OS:</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>安装完成后打开 cmd，输入</p><pre class=" language-none"><code class="language-none">node -v</code></pre><p>如果出现版本号代表安装成功</p><h2 id="安装-hexo">1.3. 安装 hexo</h2><p>安装之前在电脑一个位置新建一个文件夹，进入文件夹右键点击 git bash here,</p><p>打开 hexo 官网复制下面的命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token function">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server</code></pre><h2 id="博客的目录结构">1.4.  博客的目录结构</h2><pre class=" language-none"><code class="language-none">.├── _config.yml # 博客网站生成时需要用到的插件的配置文件├── db.json # 网站数据├── node_modules # 类库├── package-lock.json # 该博客网站生成需要的依赖项├── package.json # 博客网站生成需要的全局依赖项，执行npm install指令可以安装这些依赖项├── public # 博客网站的静态文件，会把该文件夹发布到远程服务器├── scaffolds # 新建一篇文章时的front-matter用到的模板，front-matter是后面静态文件生成时，文章显示参数的设置，包括文章标题，新建日期，标签等├── source # 里面存放着博客编写的文章└── themes # 博客用到的主题资源库</code></pre><h2 id="博客内容更新">1.5.  博客内容更新</h2><pre class=" language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>post<span class="token punctuation">]</span> new_paper <span class="token comment" spellcheck="true"># 创建一篇新的文章，会在/source/_posts中生成new_paper.md</span>hexo new page new page <span class="token comment" spellcheck="true"># 生成一个新的页面，会在/source中生成new_page文件夹，又来存放该页面的文章</span>hexo new new_page new_paper <span class="token comment" spellcheck="true"># 在新的页面中生成一篇新的文章</span>hexo new draft new_draft <span class="token comment" spellcheck="true"># 生成一篇草稿，这个仅自己可见，不会出现在正式网站上</span>hexo publish draft new_draft <span class="token comment" spellcheck="true"># 将草稿发布到post页面</span>hexo clean <span class="token comment" spellcheck="true"># 清除以往生成的博客网站数据，非必须</span>hexo g <span class="token comment" spellcheck="true"># 生成网站</span>hexo s <span class="token comment" spellcheck="true"># 启动本地服务器，默认地址 http://localhost:4000</span></code></pre><p>浏览器中输入 <code>http://localhost:4000</code> 即可访问刚刚建好的博客，当然，现在这个博客是破破烂烂的，还需要下面进行添砖加瓦。</p><h2 id="博客主题选择">1.6. 博客主题选择</h2><p>默认的模板是 <code>landscape</code>，看起来 low low 的，有必要自定义一个定制化的主题。<u>官方的主题库</u>中有不少精美的模板，可以根据喜好挑选一个，目前主流的是 NexT 主题。</p><p>我的博客使用的是<u>matery</u>主题的模板，感谢一波作者大大~</p><h1 id="主题安装">2. 主题安装</h1><h2 id="主题安装-1">2.1. 主题安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git themes/matery <span class="token comment" spellcheck="true"># 找到主题的项目地址，把主题拉到本地的themes文件夹下</span></code></pre><h3 id="切换主题">2.1.1. 切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议">2.1.1.1. _config.yml 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h2 id="主题目录的文件结构">2.2.  主题目录的文件结构</h2><pre class=" language-none"><code class="language-none">themes└── matery    ├── LICENSE    ├── README.md    ├── README_CN.md    ├── _config.yml # 主题的配置文件    ├── languages # 默认是英文显示，若要其他语言显示，则需要在此添加对应语言的翻译规则，需要修改语言时，修改 /_config.yml 中的 “language:” 这一项    ├── layout # 页面js文件    └── source # 图片等资源存放目录，这个目录对应为生成的静态网站的root路径</code></pre><p>在主题文件的根目录下，也是有一份 <code>_config.yml</code> 文件，博客根目录下的 <code>_config.yml</code> 是全局配置，优先级较高，主题的配置文件是全局配置的补充。</p><h2 id="主题项配置">2.3. 主题项配置</h2><p>菜单栏中已有默认的页面有 <code>Index</code>, <code>Tags</code>, <code>Categories</code>, <code>Archives</code>, <code>About</code>, <code>Contact</code>, <code>Friends</code>，但这些页面都是还没有被初始化的，需要手动初始化，当然你也可以自定义自己的页面</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span>hexo new page <span class="token string">"tags"</span>hexo new page <span class="token string">"about"</span>hexo new page <span class="token string">"contact"</span>hexo new page <span class="token string">"friends"</span>hexo new page 404</code></pre><p>具体见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><h1 id="博客插件安装">3.  博客插件安装</h1><p>原生态的 hexo 功能比较少，需要安装一些插件才能更好地运行。安装插件的指令为</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> plugins-name --save</code></pre><p>其中 <code>--save</code> 会把依赖项添加进 <code>package.json</code> 文件中，新安装的插件源文件在 <code>/node_modules/plugins-name</code>，插件安装其实就是下载了一套模板，这些模板大多是一些 js 文件。其运行机制就是在生成网站的静态文件时，会根据 <code>/_config.yml</code> 中设置的参数，生成对应的 js 文件，在指定的位置插入或替换这些 js 文件。</p><p>当你觉得这个插件满足不了你的功能时，可以直接到该插件的资源目录中修改其模板。</p><p>这里有一个<u>官方的插件库</u>，下面介绍几个比较有用的插件。其实有不少插件已经默认在选择的主题中安装了，譬如下面的 valine 的评论插件，已经有的插件就不用重复安装了。</p><h2 id="静态文件部署到远端-Git-服务器">3.1. 静态文件部署到远端 Git 服务器</h2><p><code>deployer-git</code> 可以在你使用 <code>hexo d</code> 指令时，自动把静态文件部署到 Git 服务器上。一般来说，只要你想要把你的博客发布到外网中，这个插件是必备，当然你也可以手动 <code>git push</code> 部署</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后在 <code>_config.yml</code> 文件中修改</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy:type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>/YourgithubName/YourgithubName.io.git<span class="token punctuation">,</span>master    <span class="token comment" spellcheck="true"># 当有多个服务源时以下设置# github: git@github.com:/YourgithubName/YourgithubName.io.git,master# gitee: git@gitee.com:/YourgithubName/YourgithubName.git,master</span></code></pre><h2 id="百度主动提交链接">3.2.  百度主动提交链接</h2><p>SEO 策略时需要用到的插件，可以主动推送最新的链接到百度收录中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save</code></pre><p>然后在 <code>_config.yml</code> 文件中修改</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">baidu_url_submit:count</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true">## 比如3，代表提交最新的三个链接host: your_site ## 在百度站长平台中注册的域名token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!path: urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里# deploy中增加一行deploy:- type: git</span>        <span class="token punctuation">...</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter</code></pre><h2 id="站点地图生成">3.3.  站点地图生成</h2><p>SEO 策略时需要用到的插件，生成网站的站点地图（sitemap），可以通过 sitemap 推送推送网站链接到搜索引擎中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">sitemap:path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap:path</span><span class="token punctuation">:</span> baidusitemap.xml</code></pre><p>然后就会生成 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code> 这两个站点地图。</p><h2 id="非中文链接生成">3.4.  非中文链接生成</h2><p>当我们使用中文生成文章的时候，例如 <code>hexo new 测试</code>，生成 <code>测试.md</code> 文件，<code>hexo d</code> 命令后，生成 <code>测试.html</code> 文件，对应的访问地址就是 <code>http://xxxx/.../测试.html</code>，这显然对搜索引擎不友好，这需要把中文地址自动转为数字或英文地址，当然<u>这篇博文</u>提到的方法可以参考一下。</p><p>这里也可以安装<u>abbrlink</u>插件来自动生成非中文链接</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">abbrlink:alg</span><span class="token punctuation">:</span> crc16   <span class="token comment" spellcheck="true"># 算法：crc16(default) and crc32rep: hex     # 进制：dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制# permalink配置修改改为下面这个permalink: posts/:abbrlink.html</span></code></pre><h2 id="外部链接跳转">3.5.  外部链接跳转</h2><p><u>hexo-external-link</u>是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">hexo_external_link:enable</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>enable_base64_encode</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>url_param_name</span><span class="token punctuation">:</span> <span class="token key atrule">'u'html_file_name</span><span class="token punctuation">:</span> <span class="token key atrule">'go.html'target_blank</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>link_rel</span><span class="token punctuation">:</span> 'external nofollow noopener noreferrer'domain<span class="token punctuation">:</span> <span class="token string">'your_domain'</span> <span class="token comment" spellcheck="true"># 如果开启了防盗链safety_chain: &lt;strong>true&lt;/strong></span></code></pre><h2 id="图片懒加载">3.6.  图片懒加载</h2><p>当你的文章中的图片很多的时候，每次打开页面的时候就会加载很慢，于是就有了懒加载。</p><p>懒加载的意思就是加载网页时文字先出来，图片再慢慢出来，这样就可以显著提高阅读体验。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload:enable</span><span class="token punctuation">:</span> &lt;strong<span class="token punctuation">></span>true&lt;/strong<span class="token punctuation">></span>   <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>loadingImg</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果不填写图片则使用默认的图片</span></code></pre><h2 id="文章搜索">3.7. 文章搜索</h2><p><u>generator-search</u>插件可以提供博客的内容搜索</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h2 id="字数统计">3.8.  字数统计</h2><p><u>wordcount</u>插件可以统计文章中的字符，根据字数估算阅读时间。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">post_wordcount:item_text</span><span class="token punctuation">:</span> &lt;strong<span class="token punctuation">></span>true&lt;/strong<span class="token punctuation">></span>               <span class="token comment" spellcheck="true"># 是否显示“字数统计”及“阅读分钟”的文字wordcount: &lt;strong>true&lt;/strong>               # 是否显示字数统计min2read: &lt;strong>true&lt;/strong>                # 是否显示估算阅读分钟totalcount: &lt;strong>true&lt;/strong>          # 是否在网站底部显示所有文章字数之和separated_meta: &lt;strong>true&lt;/strong></span></code></pre><h2 id="添加-RSS-订阅">3.9.  添加 RSS 订阅</h2><p>就如同订阅公众号一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过 RSS 订阅它们，然后在 RSS 阅读器上可以实时推送这些消息。可以安装 <u>hexo-generator-feed</u> 插件使用 RSS 订阅功能。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># RSS订阅feed:type: atom</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token key atrule">20hub:content:content_limit</span><span class="token punctuation">:</span> <span class="token key atrule">140content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span></code></pre><p>这个时候你的 RSS 链接就是 域名 <code>/atom.xml</code> 了。</p><h2 id="添加一个二次元的萌妹子">3.10. 添加一个二次元的萌妹子</h2><p><u>helper-live2d</u>插件可以为你的博客生成一个随着你的鼠标抖动（误）的二次元萌妹子，死宅居家必备</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-helper-live2d --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">live2d:enable</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>log</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>model:use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko  <span class="token key atrule">display:position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token key atrule">150height</span><span class="token punctuation">:</span> <span class="token key atrule">300mobile:show</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>react:opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span></code></pre><h1 id="博客发布">4. 博客发布</h1><p>现在都还只是本地部署，要想通过外网能访问，就得部署到远程的服务器上。</p><h2 id="Git-环境配置">4.1. Git 环境配置</h2><p>Git 是一个分布式版本控制系统，一般来说，本地仓库为客户端，远端仓库为服务端。</p><p>GitHub、gitee 等都是一些服务端 Git 代码托管平台。下面以 GitHub 为例，其他 gitee 等平台操作是差不多的，具体操作可以自行百度。</p><p>gitee 不能使用自定义域名(我不用的理由)，github 百度爬虫不能爬取（但可以主动提交站点链接）</p><h3 id="注册账号">4.1.1. 注册账号</h3><p><u>GitHub 官网</u>按照指引创建一个账号。</p><h3 id="创建-ssh-key">4.1.2. 创建 ssh key</h3><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，可以通过密码的形式确认身份。如果不想每次连接时都要输入密码，可以通过公私钥鉴权的方式确认身份。</p><p>所以首先通过下面指令在本地创建一个 ssh key</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"your_email_address"</span></code></pre><p>然后一直回车即可。</p><p>指令操作成功后，会在用户文件夹（类 Unix 操作系统为 <code>~</code>，Windows 操作系统为 <code>%HOMEPATH%</code>）下生成 <code>.ssh</code> 文件夹，其文件结构如下：</p><pre class=" language-none"><code class="language-none">.ssh├── config # 本地ssh的配置信息├── id_rsa # 私钥文件├── id_rsa.pub # 公钥存储文件，一行代表一个公钥└── known_hosts # 已经识别过的主机地址名单，名单中的主机会跳过警告部分</code></pre><blockquote><p>Windows 中系统路径含义系统路径（不区分大小写）对应的绝对路径：<br>- 当前系统盘符：<code>C:</code>、<code>%systemdrive%</code>、<code>%HOMEDRIVE%</code><br>- 当前系统目录： <code>C:\WINDOWS</code> 、<code>%systemroot%</code>、<code>%Windir%</code><br>- 当前用户文件夹：<code>C:\Administrator</code>、<code>%UserProfile%</code>、<code>%HOMEPATH%</code><br>- 所有用户文件夹：<code>C:\ProgramData</code>、<code>%AllUsersProfile%</code><br>- 临时文件夹 1：<code>C:\WINDOWS\Temp</code>、<code>%temp%</code><br>- 临时文件夹 2：<code>%SystemRoot%\TEMP</code><br>- 程序文件夹：<code>C:\Program Files</code>、<code>%ProgramFiles%</code><br>- 程序快速启动设置文件夹：<code>C:\Administrator\AppData\Roaming</code>、<code>%AppData%</code></p></blockquote><h3 id="在-GitHub-中添加我们的公钥">4.1.3.  在 GitHub 中添加我们的公钥</h3><p>打开 GitHub -&gt; Account -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; Key 输入框中输入 <code>id_rsa.pub</code> 中的公钥，如果有多行，取一行就可以 -&gt; Add SSH key -&gt; 添加成功</p><h3 id="验证鉴权结果">4.1.4. 验证鉴权结果</h3><p>本地输入以下指令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>如果出现 <code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明本地 Git 仓库和 GitHub 仓库已经成功通信</p><h3 id="个人用户设置">4.1.5. 个人用户设置</h3><p>这一步是必要的，否则后面无法创建 GitHub page</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"account"</span> <span class="token comment" spellcheck="true"># 用户名称</span><span class="token function">git</span> config --global user.email <span class="token string">"your_email_address"</span> <span class="token comment" spellcheck="true"># 电子信息</span><span class="token function">git</span> config --local -e <span class="token comment" spellcheck="true"># 直接编辑配置文件</span></code></pre><h2 id="部署到远端服务器">4.2.  部署到远端服务器</h2><p>下面还是以 GitHub 为例。</p><p>打开你的 GitHub，新建一个仓库，Repository name 命名为 xxx.github.io（xxx 是你 GitHub 账号，以免给自己后面添麻烦，一定要以这种格式命名，否则建好的博客根目录是 <a href="https://xxx.github.io/yyy">https://xxx.github.io/yyy</a>，博客的排版会乱掉或者直接就是 404 了）。</p><p>这里一定要选 Public 自己的仓库，不然无法使用 github page</p><p>创建后，点击仓库的 setting—-pages,在 Build and deployment 中 Source 选择 deploy from a branch ,branch 中选择 main root ，这时候会发现提示需要在仓库中写一些东西才行。在 bash 中写入：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"# ronghao"</span> <span class="token operator">>></span> README.md<span class="token function">git</span> init<span class="token function">git</span> add README.md<span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token function">git</span> branch -M main<span class="token function">git</span> remote add origin git@github.com:ronghao233/ronghao.git<span class="token function">git</span> push -u origin main</code></pre><p>这时在打开看见仓库里面有东西了，GitHub Pages 创建成功</p><p>你可以在新建仓库的 setting 的 GitHub Pages 一栏中看到 <code>Your site is published at https://xxx.github.io/</code> 信息时，说明你的博客主页已经成功开通了。</p><p><img src="/static1/boxcnK9lPujGIh6JbafQ48Qsjhf.png"></p><p>接下来就是 <code>hexo g -d</code>（前提是 Git 环境和 <code>hexo-deployer-git</code> 插件已经配置好）把你的博客更新上传。</p><p>最后，浏览器中输入 <code>https://xxx.github.io</code> 即可访问你的博客了。</p><h2 id="设置个人域名">4.3. 设置个人域名</h2><p>默认博客的地址是 <code>https://xxx.github.io</code>，如果感觉很 low，可以在阿里云等网站上购买注册一个域名，然后按以下步骤操作：</p><p>支付宝登陆阿里云，进行实名认证（重要），购买域名，进入控制台，在我的导航里面点击域名，点击全部域名（需要确保该域名已经进行实名认证），点击添加解析</p><p><img src="/static1/boxcnBSKBnYlWv0WlFAUjbCJuSh.png"></p><p>需要确保已经分配到 DNS 服务器，添加记录如下图所示，主机记录可以写 @ 这样就没有域名前缀，记录类型写 CNAME，记录值写自己的 gitpages 域名。</p><p><img src="/static1/boxcnHHGOeZ66ncpZ6c4GhTvJ2g.png"></p><p><img src="/static1/boxcnBqJt0dE0RxGMYQIz87ejMd.png"></p><p><img src="/static1/boxcn3wf3zTLMlFu95I0ID7b75g.png"></p><p><img src="/static1/boxcn51xyRuX2HOgBncafuY0xUe.png"></p><p>github 设置 custom domain 时这里可能会不成功（需要等待或者在浏览器上输入自己购买的域名多刷新几次），这里把自己的域名写入，需要打对勾，点击 save</p><p><img src="/static1/boxcnJCyvMVvTkLtk69N5QAKbZe.png"></p><h1 id="接入飞书">5. 接入飞书</h1><p><strong>图片下载和发布是 Markdown 写作的重要痛点，</strong></p><p>虽然 markdown 语法够简单，但还是要记一些语法，比如因为自己写语法，所以甚至产生分心，比如也因为语法，写作过程中会有无用的字干扰，写完的文字还需要单独预览。</p><p><strong>飞书文档写作的亮点</strong></p><p>插入图片超级简单，简单好用的排版，方便的导出功能</p><p>飞书文档官方导出功能仅支持导出 Word 或 PDF</p><p>也就意味着导出成为 Markdown 成为了不可能，好在有万能的攻城狮，2022 年少数派等大神开发了好几个开源的飞书文档转 Markdown 的工具：</p><ol><li><strong>Feishu2Md</strong>：一键命令下载飞书文档为 Markdown，使用 Go 语言实现。</li><li><strong>feishu-backup</strong>：飞书云文档备份。可以下载飞书文档为 Markdown。前端实现。</li></ol><p>上面两个就是北冥有鱼使用的飞书文档转为 Markdown 的工具，北冥有鱼现在使用的是前者，后者需要建个站，略有麻烦。</p><h2 id="下载-feishu2md">5.1. 下载 feishu2md</h2><p>feishu2md 使用非常简单，直接在 cmd 里输入”feishu2md 飞书文档的 URL”，就可以下载飞书文档为 Markdown 到本地：</p><p>Feishu2Md 已开源并发布在 Github 中： <a href="https://sspai.com/link?target=https://github.com/Wsine/feishu2md">https://github.com/Wsine/feishu2md</a></p><p><strong>下载 feishu2md </strong>-<strong> </strong>得益于 golang 本身的多平台编译特性，大大已经为 Windows&#x2F;Linux&#x2F;Mac 都预编译了该工具的可执行文件，可以直接从 <a href="https://sspai.com/link?target=https://github.com/Wsine/feishu2md/releases">Github Release</a> 中下载，从压缩包中提取自己平台的 feishu2md 二进制可执行文件 exe 即可，把该目录放置在电脑的 PATH 路径中。</p><h2 id="设置飞书，生成配置文件">5.2. 设置飞书，生成配置文件</h2><p><strong>生成配置文件 </strong>- feishu2md 需要使用飞书的 Open API 提取飞书文档，因此需要配置相应的 App ID 和 App Secret 进行 API 的调用。</p><ul><li>进入飞书<a href="https://open.feishu.cn/app">开发者后台</a></li><li>创建企业自建应用，信息随意填写，发布但不必等待审核通过。</li><li>选择测试企业和人员，创建测试企业，绑定应用，切换至测试版本（一定要从这里点击切换，不要从账号那里切换！作者花了不少时间才弄清楚！不然无法下载当前账号里面的文章的 md 文件！）</li></ul><p><img src="/static1/boxcnt31bJTuZrAztE1mfK38HEv.png"></p><ul><li><p>（重要）打开权限管理，云文档，开通所有只读权限</p><ul><li>「查看、评论和导出文档」权限 <code>docs:doc:readonly</code></li><li>「查看 DocX 文档」权限 <code>docx:document:readonly</code></li><li>「查看、评论和下载云空间中所有文件」权限 <code>drive:drive:readonly</code></li><li>「查看和下载云空间中的文件」权限 <code>drive:file:readonly</code></li></ul></li><li><p>打开凭证与基础信息，获取 App ID 和 App Secret（注意是测试版本的 App ID 和 App Secret！作者花了不少时间才弄清楚！）</p></li></ul><p><strong>生成配置文件</strong></p><p>在 cmd 里面输入</p><pre class=" language-none"><code class="language-none">>feishu2md config  --appId xxxx>feishu2md config --appSecret xxx>feishu2md config --appId&#123;  "feishu": &#123;    "app_id": "",    "app_secret": ""  &#125;,  "output": &#123;    "image_dir": "static",    "title_as_filename": false  &#125;&#125;</code></pre><p><strong>下载飞书文档</strong> - 通过 <code>feishu2md &lt; 你的飞书文档链接 &amp; gt;</code> 直接下载，文档链接可以通过 分享 &gt; 开启链接分享 &gt; 复制链接 获得。</p><p><img src="/static1/boxcn9PzaRWRpqqyUizb3XhtBGc.png"></p><p>直接在 cmd 里输入”feishu2md 飞书文档的 URL”，就可以下载飞书文档为 Markdown 到本地：</p><p><img src="/static1/boxcnkKqzQLXlJQ6Qm2dJncGAT1.png"></p><p>当然，还包括了图片文件，同 md 文件在同一个目录下有一个 static 目录，就是存放了所有的文件，虽然图片文件的命名看不懂，但能保存所有原汁原味的图片文件，不需要自己手工下载和整理，这已经是超级方便啦。</p><p>之后把 md 文件放入_post 中，static 文件夹放入 source 中，就可以直接运行了。</p><h2 id="自动生成的-markdown-图片过大的问题解决方法">5.3. 自动生成的 markdown 图片过大的问题解决方法</h2><p>北冥有鱼发现有些图片在博客中会很大，通过这种方法直接把很大的图片对应的自动生成的 markdown 语法改成 html 的写法就可以了：（尝试了其他方法都不太成功，只能手动这样调整了）</p><p><img src="/static1/boxcnZDHck7QuyxIBdWt9x7CHYd.png"></p><p>好了，有时间再总结一下 github pages 的网页优化速度的问题和 SEO 优化问题。如果觉得对你有帮助，您的打赏是对于我创作的鼓励！</p><h2 id="在hexo中插入pdf">5.4. 在hexo中插入pdf</h2><p>将您的PDF文件放入您Hexo博客的source文件夹中。例如，您可以将其放在source&#x2F;about文件夹中。<br>在Hexo博客的根目录下运行以下命令安装hexo插件：<br>‘’’bash<br>npm install hexo-filter-plantuml –save<br>‘’’</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>具体数学第一节</title>
      <link href="/posts/c674.html"/>
      <url>/posts/c674.html</url>
      
        <content type="html"><![CDATA[<h1 id="具体数学第一节">1. 具体数学第一节</h1><h1 id="汉诺塔问题">2. 汉诺塔问题</h1><p>经典河内塔问题中，有 3 根柱子和 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按从大到小依次套在一根柱子上，现在想将所有的圆盘按照原来的位置从一根柱子移动到另一根柱子上，移动过程需要遵守一些规则：</p><p>1.每次只能移动一个盘子</p><p>2.盘子只能从柱子顶端滑出移动到下一根柱子</p><p>3.盘子只能叠在没有盘子的柱子或者比它大的盘子上</p><p>河内塔的规则，限定了较大的圆盘要先转移到目标柱子（选择的任意一根柱子）上，这时直接转移是不可行的，一定要利用其他柱子。问题中只有 3 根柱子，所以，另外一个柱子一定是要将 N-1 个圆盘按照从大到小堆起，（这个柱子我们叫它<strong>cache peg</strong>，<strong>存放柱</strong>），这才使得最大圆盘可以直接从原来位置转移到目标位置。</p><p>假设解决 N 个圆盘的移动需要时间，记 Tn ：</p><p><img src="/static/boxcn1GIYsieYHjLyVbZ005uF5g.png"></p><p><img src="/static/boxcn7yObZ7h5spJEHNKOHiVJLg.png"></p><p><img src="/static/boxcn5Wz0teewkRb82ppKGLAxid.png"></p><p>数学归纳法证明：</p><p><img src="/static/boxcnOKKKJkJlHt8tNHJT5znOog.png"></p><p><img src="/static/boxcnmOTRdSGm09hvS8eBenGkRf.png"></p><h1 id="直线分割平面问题">3. 直线分割平面问题:</h1><p>一：N 条直线分割平面</p><p>假设，x 条线能将平面分为 f(x)份，这对于份 f(n) 第 n 条线，和其他 n-1 条线都有交点时，增加量最大，为 n;</p><p>则： f(n)&#x3D;f(n-1)+n;   f(n-1)&#x3D;f(n-2)+n-1</p><p><img src="/static/boxcnA0DMkzqwcoe3LyJNfzkiAg.png"></p><p>有 f(0)&#x3D;1；得到：n 条直线分割平面的数量最大为：f(n)&#x3D;n*(n+1)&#x2F;2 + 1;</p><!-- ![](static/boxcnIuZVy1gbVYrVc4l5hnfOod.png) --><img src="/static/boxcnIuZVy1gbVYrVc4l5hnfOod.png" width="150" height="150"><p>二. “V” 形线分割平面(折线)</p><p>对于“V”,我们可以把他们当成两条相交直线去掉两条射线。如下图：</p><!-- ![](static/boxcn8Mjca0TrEbNXCGZ2dKkwVg.png) --><img src="/static/boxcn8Mjca0TrEbNXCGZ2dKkwVg.png" width="150" height="150"><p>上图为两条‘V’形线，对于每条‘V’形线，都相当于两条直线去掉后面两条射线，而去掉这两条射线会使平面减少 2，</p><p>因此，有直线公式转化得到： F(n)&#x3D;f(2n)-2n&#x3D;2n(2n+1)&#x2F;2+1-2n;</p><p>三.  ‘N’形线</p><p>N’形线分两种，一种是有两条平行边，二是没有平行边；</p><!-- ![](static/boxcn6LyKy1ZhFwUEcSd6KPWW9b.png) --><img src="/static/boxcn6LyKy1ZhFwUEcSd6KPWW9b.png" width="150" height="150"><p>对于没有平行边的情况：</p><p>我们可以将其看成 3 条直线相交，然后去掉 4 条射线，去掉这 4 条射线后，会使平面相对于 3 条直线减少 6；</p><p>有直线公式可推得：</p><p>f(N)&#x3D;f(3n)-6n&#x3D;3n(3n+1)&#x2F;2+1-6n;</p><p>如果是有平行：</p><p>情况则相对于没有的情况减少一个平面；</p><p>即为： f(N)&#x3D;f(3n)&#x3D;3n(3n+1)&#x2F;2 + 1 - 5n;</p><h1 id="约瑟夫环问题">4. 约瑟夫环问题</h1><p>我们这个规则是这么定的：<br><strong>在一间房间总共有 n 个人（下标 0～n-1），只能有最后一个人活命。</strong></p><p>按照如下规则去排除人：</p><ul><li>所有人围成一圈</li><li>顺时针报数，每次报到 q 的人将被排除掉</li><li>被排除掉的人将从房间内被移走</li><li>然后从被 kill 掉的下一个人重新报数，继续报 q，再清除，直到剩余一人</li></ul><p><strong>你要做的是：当你在这一群人之间时，你必须选择一个位置以使得你变成那剩余的最后一人，也就是活下来。</strong></p><p>当 q &#x3D; 2 时候，是一个特例，能快速求解</p><p><strong>1.思路：注意这里的前提是 n &#x3D; 2^k</strong></p><p>如果只有 2 个人，显然剩余的为 1 号</p><p>如果有 4 个人，第一轮除掉 2,4，剩下 1,3，3 死，留下 1</p><p>如果是 8 个人，先除去 2,4,6,8,之后 3,7，剩下 1,5，除去 5，又剩下 1 了</p><p>我们仔细分析也就是每次除去一半的元素，然后剩余的一半继续重复之前的策略，再除去一半。（可想到递归）</p><p>结合：J(2) &#x3D; 1 我知道两个数，从 1 开始，肯定是 2 先死，剩下 1.</p><p>定义 J(n)为 n 个人构成的约瑟夫环最后结果，则有<strong>j(2^k) &#x3D; 1</strong></p><p><strong>2，假设 n &#x3D; 2^k + t，t 可以随意取，比如 1，2，3…….</strong></p><p>假设 n &#x3D; 11，这时候 n &#x3D; 2^3 + 3，也就是说 t &#x3D; 3，所以开始剔除 3 个元素直到其成为 2^k 问题的约瑟夫问题。</p><p>So，我们在剔除了 t（3）个元素之后（分别是 2,4,6），此时我们定格在 2t+1（7）处，并且将 2t+1（7）作为新的一号，而且这时候的约瑟夫环只剩下 2^3，也就是 J(2^3 + 3) &#x3D; 2*3 (剔除三个)+ 1（2^k 的约瑟夫问题） &#x3D; 7，</p><p>答案为 7</p><p><strong>总结一下这个规律：</strong><br><strong>J(2^k + t) &#x3D; 2t+1</strong></p><p><strong>3,q 不等于 2 的情况下：</strong></p><p>规律：<strong>Jq(n+1) &#x3D; ( Jq(n) + q ) &#x2F; (n+1)</strong></p><p><img src="/static/boxcntrRGY3WXFebbLOE0SIYMKd.png"></p><p>其实就是从 q 开始，到之前最大数 n-1，每个数都减去 q,从 0 开始之后接着 n-1 这个新的值每次往后加 1，直到加到 n-1（这个下标）</p><p><img src="/static/boxcnqIOc5P9oz4HX2rOnsHGrsg.png"></p><p><img src="/static/boxcnqLTZqBrlXR6vNUOYC3fbOb.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
