<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo+github+飞书，手把手从0搭建博客</title>
      <link href="/posts/1fb7.html"/>
      <url>/posts/1fb7.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客本地部署">1. 博客本地部署</h1><h2 id="安装-git">1.1. 安装 git</h2><p><a href="http://git-scm.com/download">Git 客户端</a>:<br>作用：把本地的 hexo 内容提交到 github 上去</p><p>安装过程无脑下一步，出现下面的就是安装成功。</p><!-- ![](static1/boxcncDmmuuYYHQjyPWNDDXzYlb.png) --><img src="/static1/boxcncDmmuuYYHQjyPWNDDXzYlb.png" width="150" height="150"><h2 id="Node-js-环境安装">1.2. Node.js 环境安装</h2><p>Hexo 是基于 node.js 编写的，所以需要安装一下 nodeJs 和里面的 npm 工具。</p><p>Windows：<u>官网</u>下载安装即可</p><p>Linux:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Debian/Ubuntu等系统</span>yum <span class="token function">install</span> nodejsyum <span class="token function">install</span> <span class="token function">npm</span><span class="token comment" spellcheck="true"># Centos/RedHat等系统apt-get install nodejs</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>Mac OS:</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>安装完成后打开 cmd，输入</p><pre class=" language-none"><code class="language-none">node -v</code></pre><p>如果出现版本号代表安装成功</p><h2 id="安装-hexo">1.3. 安装 hexo</h2><p>安装之前在电脑一个位置新建一个文件夹，进入文件夹右键点击 git bash here,</p><p>打开 hexo 官网复制下面的命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token function">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server</code></pre><h2 id="博客的目录结构">1.4.  博客的目录结构</h2><pre class=" language-none"><code class="language-none">.├── _config.yml # 博客网站生成时需要用到的插件的配置文件├── db.json # 网站数据├── node_modules # 类库├── package-lock.json # 该博客网站生成需要的依赖项├── package.json # 博客网站生成需要的全局依赖项，执行npm install指令可以安装这些依赖项├── public # 博客网站的静态文件，会把该文件夹发布到远程服务器├── scaffolds # 新建一篇文章时的front-matter用到的模板，front-matter是后面静态文件生成时，文章显示参数的设置，包括文章标题，新建日期，标签等├── source # 里面存放着博客编写的文章└── themes # 博客用到的主题资源库</code></pre><h2 id="博客内容更新">1.5.  博客内容更新</h2><pre class=" language-bash"><code class="language-bash">hexo new <span class="token punctuation">[</span>post<span class="token punctuation">]</span> new_paper <span class="token comment" spellcheck="true"># 创建一篇新的文章，会在/source/_posts中生成new_paper.md</span>hexo new page new page <span class="token comment" spellcheck="true"># 生成一个新的页面，会在/source中生成new_page文件夹，又来存放该页面的文章</span>hexo new new_page new_paper <span class="token comment" spellcheck="true"># 在新的页面中生成一篇新的文章</span>hexo new draft new_draft <span class="token comment" spellcheck="true"># 生成一篇草稿，这个仅自己可见，不会出现在正式网站上</span>hexo publish draft new_draft <span class="token comment" spellcheck="true"># 将草稿发布到post页面</span>hexo clean <span class="token comment" spellcheck="true"># 清除以往生成的博客网站数据，非必须</span>hexo g <span class="token comment" spellcheck="true"># 生成网站</span>hexo s <span class="token comment" spellcheck="true"># 启动本地服务器，默认地址 http://localhost:4000</span></code></pre><p>浏览器中输入 <code>http://localhost:4000</code> 即可访问刚刚建好的博客，当然，现在这个博客是破破烂烂的，还需要下面进行添砖加瓦。</p><h2 id="博客主题选择">1.6. 博客主题选择</h2><p>默认的模板是 <code>landscape</code>，看起来 low low 的，有必要自定义一个定制化的主题。<u>官方的主题库</u>中有不少精美的模板，可以根据喜好挑选一个，目前主流的是 NexT 主题。</p><p>我的博客使用的是<u>matery</u>主题的模板，感谢一波作者大大~</p><h1 id="主题安装">2. 主题安装</h1><h2 id="主题安装-1">2.1. 主题安装</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git themes/matery <span class="token comment" spellcheck="true"># 找到主题的项目地址，把主题拉到本地的themes文件夹下</span></code></pre><h3 id="切换主题">2.1.1. 切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议">2.1.1.1. _config.yml 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h2 id="主题目录的文件结构">2.2.  主题目录的文件结构</h2><pre class=" language-none"><code class="language-none">themes└── matery    ├── LICENSE    ├── README.md    ├── README_CN.md    ├── _config.yml # 主题的配置文件    ├── languages # 默认是英文显示，若要其他语言显示，则需要在此添加对应语言的翻译规则，需要修改语言时，修改 /_config.yml 中的 “language:” 这一项    ├── layout # 页面js文件    └── source # 图片等资源存放目录，这个目录对应为生成的静态网站的root路径</code></pre><p>在主题文件的根目录下，也是有一份 <code>_config.yml</code> 文件，博客根目录下的 <code>_config.yml</code> 是全局配置，优先级较高，主题的配置文件是全局配置的补充。</p><h2 id="主题项配置">2.3. 主题项配置</h2><p>菜单栏中已有默认的页面有 <code>Index</code>, <code>Tags</code>, <code>Categories</code>, <code>Archives</code>, <code>About</code>, <code>Contact</code>, <code>Friends</code>，但这些页面都是还没有被初始化的，需要手动初始化，当然你也可以自定义自己的页面</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span>hexo new page <span class="token string">"tags"</span>hexo new page <span class="token string">"about"</span>hexo new page <span class="token string">"contact"</span>hexo new page <span class="token string">"friends"</span>hexo new page 404</code></pre><p>具体见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p><h1 id="博客插件安装">3.  博客插件安装</h1><p>原生态的 hexo 功能比较少，需要安装一些插件才能更好地运行。安装插件的指令为</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> plugins-name --save</code></pre><p>其中 <code>--save</code> 会把依赖项添加进 <code>package.json</code> 文件中，新安装的插件源文件在 <code>/node_modules/plugins-name</code>，插件安装其实就是下载了一套模板，这些模板大多是一些 js 文件。其运行机制就是在生成网站的静态文件时，会根据 <code>/_config.yml</code> 中设置的参数，生成对应的 js 文件，在指定的位置插入或替换这些 js 文件。</p><p>当你觉得这个插件满足不了你的功能时，可以直接到该插件的资源目录中修改其模板。</p><p>这里有一个<u>官方的插件库</u>，下面介绍几个比较有用的插件。其实有不少插件已经默认在选择的主题中安装了，譬如下面的 valine 的评论插件，已经有的插件就不用重复安装了。</p><h2 id="静态文件部署到远端-Git-服务器">3.1. 静态文件部署到远端 Git 服务器</h2><p><code>deployer-git</code> 可以在你使用 <code>hexo d</code> 指令时，自动把静态文件部署到 Git 服务器上。一般来说，只要你想要把你的博客发布到外网中，这个插件是必备，当然你也可以手动 <code>git push</code> 部署</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>然后在 <code>_config.yml</code> 文件中修改</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">deploy:type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>/YourgithubName/YourgithubName.io.git<span class="token punctuation">,</span>master    <span class="token comment" spellcheck="true"># 当有多个服务源时以下设置# github: git@github.com:/YourgithubName/YourgithubName.io.git,master# gitee: git@gitee.com:/YourgithubName/YourgithubName.git,master</span></code></pre><h2 id="百度主动提交链接">3.2.  百度主动提交链接</h2><p>SEO 策略时需要用到的插件，可以主动推送最新的链接到百度收录中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save</code></pre><p>然后在 <code>_config.yml</code> 文件中修改</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">baidu_url_submit:count</span><span class="token punctuation">:</span> <span class="token number">3 </span><span class="token comment" spellcheck="true">## 比如3，代表提交最新的三个链接host: your_site ## 在百度站长平台中注册的域名token: your_token ## 请注意这是您的秘钥， 请不要发布在公众仓库里!path: urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里# deploy中增加一行deploy:- type: git</span>        <span class="token punctuation">...</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter</code></pre><h2 id="站点地图生成">3.3.  站点地图生成</h2><p>SEO 策略时需要用到的插件，生成网站的站点地图（sitemap），可以通过 sitemap 推送推送网站链接到搜索引擎中</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">sitemap:path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap:path</span><span class="token punctuation">:</span> baidusitemap.xml</code></pre><p>然后就会生成 <code>sitemap.xml</code> 和 <code>baidusitemap.xml</code> 这两个站点地图。</p><h2 id="非中文链接生成">3.4.  非中文链接生成</h2><p>当我们使用中文生成文章的时候，例如 <code>hexo new 测试</code>，生成 <code>测试.md</code> 文件，<code>hexo d</code> 命令后，生成 <code>测试.html</code> 文件，对应的访问地址就是 <code>http://xxxx/.../测试.html</code>，这显然对搜索引擎不友好，这需要把中文地址自动转为数字或英文地址，当然<u>这篇博文</u>提到的方法可以参考一下。</p><p>这里也可以安装<u>abbrlink</u>插件来自动生成非中文链接</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">abbrlink:alg</span><span class="token punctuation">:</span> crc16   <span class="token comment" spellcheck="true"># 算法：crc16(default) and crc32rep: hex     # 进制：dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制# permalink配置修改改为下面这个permalink: posts/:abbrlink.html</span></code></pre><h2 id="外部链接跳转">3.5.  外部链接跳转</h2><p><u>hexo-external-link</u>是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">hexo_external_link:enable</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>enable_base64_encode</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>url_param_name</span><span class="token punctuation">:</span> <span class="token key atrule">'u'html_file_name</span><span class="token punctuation">:</span> <span class="token key atrule">'go.html'target_blank</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>link_rel</span><span class="token punctuation">:</span> 'external nofollow noopener noreferrer'domain<span class="token punctuation">:</span> <span class="token string">'your_domain'</span> <span class="token comment" spellcheck="true"># 如果开启了防盗链safety_chain: &lt;strong>true&lt;/strong></span></code></pre><h2 id="图片懒加载">3.6.  图片懒加载</h2><p>当你的文章中的图片很多的时候，每次打开页面的时候就会加载很慢，于是就有了懒加载。</p><p>懒加载的意思就是加载网页时文字先出来，图片再慢慢出来，这样就可以显著提高阅读体验。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload:enable</span><span class="token punctuation">:</span> &lt;strong<span class="token punctuation">></span>true&lt;/strong<span class="token punctuation">></span>   <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>loadingImg</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如果不填写图片则使用默认的图片</span></code></pre><h2 id="文章搜索">3.7. 文章搜索</h2><p><u>generator-search</u>插件可以提供博客的内容搜索</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h2 id="字数统计">3.8.  字数统计</h2><p><u>wordcount</u>插件可以统计文章中的字符，根据字数估算阅读时间。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">post_wordcount:item_text</span><span class="token punctuation">:</span> &lt;strong<span class="token punctuation">></span>true&lt;/strong<span class="token punctuation">></span>               <span class="token comment" spellcheck="true"># 是否显示“字数统计”及“阅读分钟”的文字wordcount: &lt;strong>true&lt;/strong>               # 是否显示字数统计min2read: &lt;strong>true&lt;/strong>                # 是否显示估算阅读分钟totalcount: &lt;strong>true&lt;/strong>          # 是否在网站底部显示所有文章字数之和separated_meta: &lt;strong>true&lt;/strong></span></code></pre><h2 id="添加-RSS-订阅">3.9.  添加 RSS 订阅</h2><p>就如同订阅公众号一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过 RSS 订阅它们，然后在 RSS 阅读器上可以实时推送这些消息。可以安装 <u>hexo-generator-feed</u> 插件使用 RSS 订阅功能。</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># RSS订阅feed:type: atom</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token key atrule">20hub:content:content_limit</span><span class="token punctuation">:</span> <span class="token key atrule">140content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span></code></pre><p>这个时候你的 RSS 链接就是 域名 <code>/atom.xml</code> 了。</p><h2 id="添加一个二次元的萌妹子">3.10. 添加一个二次元的萌妹子</h2><p><u>helper-live2d</u>插件可以为你的博客生成一个随着你的鼠标抖动（误）的二次元萌妹子，死宅居家必备</p><p><strong>bash</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-helper-live2d --save</code></pre><p>然后在 <code>_config.yml</code> 文件中添加</p><p><strong>yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">live2d:enable</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>log</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>false&lt;/strong>model:use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>wanko  <span class="token key atrule">display:position</span><span class="token punctuation">:</span> right    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token key atrule">150height</span><span class="token punctuation">:</span> <span class="token key atrule">300mobile:show</span><span class="token punctuation">:</span> <span class="token key atrule">&lt;strong>true&lt;/strong>react:opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span></code></pre><h1 id="博客发布">4. 博客发布</h1><p>现在都还只是本地部署，要想通过外网能访问，就得部署到远程的服务器上。</p><h2 id="Git-环境配置">4.1. Git 环境配置</h2><p>Git 是一个分布式版本控制系统，一般来说，本地仓库为客户端，远端仓库为服务端。</p><p>GitHub、gitee 等都是一些服务端 Git 代码托管平台。下面以 GitHub 为例，其他 gitee 等平台操作是差不多的，具体操作可以自行百度。</p><p>gitee 不能使用自定义域名(我不用的理由)，github 百度爬虫不能爬取（但可以主动提交站点链接）</p><h3 id="注册账号">4.1.1. 注册账号</h3><p><u>GitHub 官网</u>按照指引创建一个账号。</p><h3 id="创建-ssh-key">4.1.2. 创建 ssh key</h3><p>由于你的本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，可以通过密码的形式确认身份。如果不想每次连接时都要输入密码，可以通过公私钥鉴权的方式确认身份。</p><p>所以首先通过下面指令在本地创建一个 ssh key</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"your_email_address"</span></code></pre><p>然后一直回车即可。</p><p>指令操作成功后，会在用户文件夹（类 Unix 操作系统为 <code>~</code>，Windows 操作系统为 <code>%HOMEPATH%</code>）下生成 <code>.ssh</code> 文件夹，其文件结构如下：</p><pre class=" language-none"><code class="language-none">.ssh├── config # 本地ssh的配置信息├── id_rsa # 私钥文件├── id_rsa.pub # 公钥存储文件，一行代表一个公钥└── known_hosts # 已经识别过的主机地址名单，名单中的主机会跳过警告部分</code></pre><blockquote><p>Windows 中系统路径含义系统路径（不区分大小写）对应的绝对路径：<br>- 当前系统盘符：<code>C:</code>、<code>%systemdrive%</code>、<code>%HOMEDRIVE%</code><br>- 当前系统目录： <code>C:\WINDOWS</code> 、<code>%systemroot%</code>、<code>%Windir%</code><br>- 当前用户文件夹：<code>C:\Administrator</code>、<code>%UserProfile%</code>、<code>%HOMEPATH%</code><br>- 所有用户文件夹：<code>C:\ProgramData</code>、<code>%AllUsersProfile%</code><br>- 临时文件夹 1：<code>C:\WINDOWS\Temp</code>、<code>%temp%</code><br>- 临时文件夹 2：<code>%SystemRoot%\TEMP</code><br>- 程序文件夹：<code>C:\Program Files</code>、<code>%ProgramFiles%</code><br>- 程序快速启动设置文件夹：<code>C:\Administrator\AppData\Roaming</code>、<code>%AppData%</code></p></blockquote><h3 id="在-GitHub-中添加我们的公钥">4.1.3.  在 GitHub 中添加我们的公钥</h3><p>打开 GitHub -&gt; Account -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key -&gt; Key 输入框中输入 <code>id_rsa.pub</code> 中的公钥，如果有多行，取一行就可以 -&gt; Add SSH key -&gt; 添加成功</p><h3 id="验证鉴权结果">4.1.4. 验证鉴权结果</h3><p>本地输入以下指令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>如果出现 <code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>，说明本地 Git 仓库和 GitHub 仓库已经成功通信</p><h3 id="个人用户设置">4.1.5. 个人用户设置</h3><p>这一步是必要的，否则后面无法创建 GitHub page</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"account"</span> <span class="token comment" spellcheck="true"># 用户名称</span><span class="token function">git</span> config --global user.email <span class="token string">"your_email_address"</span> <span class="token comment" spellcheck="true"># 电子信息</span><span class="token function">git</span> config --local -e <span class="token comment" spellcheck="true"># 直接编辑配置文件</span></code></pre><h2 id="部署到远端服务器">4.2.  部署到远端服务器</h2><p>下面还是以 GitHub 为例。</p><p>打开你的 GitHub，新建一个仓库，Repository name 命名为 xxx.github.io（xxx 是你 GitHub 账号，以免给自己后面添麻烦，一定要以这种格式命名，否则建好的博客根目录是 <a href="https://xxx.github.io/yyy">https://xxx.github.io/yyy</a>，博客的排版会乱掉或者直接就是 404 了）。</p><p>这里一定要选 Public 自己的仓库，不然无法使用 github page</p><p>创建后，点击仓库的 setting—-pages,在 Build and deployment 中 Source 选择 deploy from a branch ,branch 中选择 main root ，这时候会发现提示需要在仓库中写一些东西才行。在 bash 中写入：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"# ronghao"</span> <span class="token operator">>></span> README.md<span class="token function">git</span> init<span class="token function">git</span> add README.md<span class="token function">git</span> commit -m <span class="token string">"first commit"</span><span class="token function">git</span> branch -M main<span class="token function">git</span> remote add origin git@github.com:ronghao233/ronghao.git<span class="token function">git</span> push -u origin main</code></pre><p>这时在打开看见仓库里面有东西了，GitHub Pages 创建成功</p><p>你可以在新建仓库的 setting 的 GitHub Pages 一栏中看到 <code>Your site is published at https://xxx.github.io/</code> 信息时，说明你的博客主页已经成功开通了。</p><p><img src="/static1/boxcnK9lPujGIh6JbafQ48Qsjhf.png"></p><p>接下来就是 <code>hexo g -d</code>（前提是 Git 环境和 <code>hexo-deployer-git</code> 插件已经配置好）把你的博客更新上传。</p><p>最后，浏览器中输入 <code>https://xxx.github.io</code> 即可访问你的博客了。</p><h2 id="设置个人域名">4.3. 设置个人域名</h2><p>默认博客的地址是 <code>https://xxx.github.io</code>，如果感觉很 low，可以在阿里云等网站上购买注册一个域名，然后按以下步骤操作：</p><p>支付宝登陆阿里云，进行实名认证（重要），购买域名，进入控制台，在我的导航里面点击域名，点击全部域名（需要确保该域名已经进行实名认证），点击添加解析</p><p><img src="/static1/boxcnBSKBnYlWv0WlFAUjbCJuSh.png"></p><p>需要确保已经分配到 DNS 服务器，添加记录如下图所示，主机记录可以写 @ 这样就没有域名前缀，记录类型写 CNAME，记录值写自己的 gitpages 域名。</p><p><img src="/static1/boxcnHHGOeZ66ncpZ6c4GhTvJ2g.png"></p><p><img src="/static1/boxcnBqJt0dE0RxGMYQIz87ejMd.png"></p><p><img src="/static1/boxcn3wf3zTLMlFu95I0ID7b75g.png"></p><p><img src="/static1/boxcn51xyRuX2HOgBncafuY0xUe.png"></p><p>github 设置 custom domain 时这里可能会不成功（需要等待或者在浏览器上输入自己购买的域名多刷新几次），这里把自己的域名写入，需要打对勾，点击 save</p><p><img src="/static1/boxcnJCyvMVvTkLtk69N5QAKbZe.png"></p><h1 id="接入飞书">5. 接入飞书</h1><p><strong>图片下载和发布是 Markdown 写作的重要痛点，</strong></p><p>虽然 markdown 语法够简单，但还是要记一些语法，比如因为自己写语法，所以甚至产生分心，比如也因为语法，写作过程中会有无用的字干扰，写完的文字还需要单独预览。</p><p><strong>飞书文档写作的亮点</strong></p><p>插入图片超级简单，简单好用的排版，方便的导出功能</p><p>飞书文档官方导出功能仅支持导出 Word 或 PDF</p><p>也就意味着导出成为 Markdown 成为了不可能，好在有万能的攻城狮，2022 年少数派等大神开发了好几个开源的飞书文档转 Markdown 的工具：</p><ol><li><strong>Feishu2Md</strong>：一键命令下载飞书文档为 Markdown，使用 Go 语言实现。</li><li><strong>feishu-backup</strong>：飞书云文档备份。可以下载飞书文档为 Markdown。前端实现。</li></ol><p>上面两个就是北冥有鱼使用的飞书文档转为 Markdown 的工具，北冥有鱼现在使用的是前者，后者需要建个站，略有麻烦。</p><h2 id="下载-feishu2md">5.1. 下载 feishu2md</h2><p>feishu2md 使用非常简单，直接在 cmd 里输入”feishu2md 飞书文档的 URL”，就可以下载飞书文档为 Markdown 到本地：</p><p>Feishu2Md 已开源并发布在 Github 中： <a href="https://sspai.com/link?target=https://github.com/Wsine/feishu2md">https://github.com/Wsine/feishu2md</a></p><p><strong>下载 feishu2md </strong>-<strong> </strong>得益于 golang 本身的多平台编译特性，大大已经为 Windows&#x2F;Linux&#x2F;Mac 都预编译了该工具的可执行文件，可以直接从 <a href="https://sspai.com/link?target=https://github.com/Wsine/feishu2md/releases">Github Release</a> 中下载，从压缩包中提取自己平台的 feishu2md 二进制可执行文件 exe 即可，把该目录放置在电脑的 PATH 路径中。</p><h2 id="设置飞书，生成配置文件">5.2. 设置飞书，生成配置文件</h2><p><strong>生成配置文件 </strong>- feishu2md 需要使用飞书的 Open API 提取飞书文档，因此需要配置相应的 App ID 和 App Secret 进行 API 的调用。</p><ul><li>进入飞书<a href="https://open.feishu.cn/app">开发者后台</a></li><li>创建企业自建应用，信息随意填写，发布但不必等待审核通过。</li><li>选择测试企业和人员，创建测试企业，绑定应用，切换至测试版本（一定要从这里点击切换，不要从账号那里切换！作者花了不少时间才弄清楚！不然无法下载当前账号里面的文章的 md 文件！）</li></ul><p><img src="/static1/boxcnt31bJTuZrAztE1mfK38HEv.png"></p><ul><li><p>（重要）打开权限管理，云文档，开通所有只读权限</p><ul><li>「查看、评论和导出文档」权限 <code>docs:doc:readonly</code></li><li>「查看 DocX 文档」权限 <code>docx:document:readonly</code></li><li>「查看、评论和下载云空间中所有文件」权限 <code>drive:drive:readonly</code></li><li>「查看和下载云空间中的文件」权限 <code>drive:file:readonly</code></li></ul></li><li><p>打开凭证与基础信息，获取 App ID 和 App Secret（注意是测试版本的 App ID 和 App Secret！作者花了不少时间才弄清楚！）</p></li></ul><p><strong>生成配置文件</strong></p><p>在 cmd 里面输入</p><pre class=" language-none"><code class="language-none">>feishu2md config  --appId xxxx>feishu2md config --appSecret xxx>feishu2md config --appId&#123;  "feishu": &#123;    "app_id": "",    "app_secret": ""  &#125;,  "output": &#123;    "image_dir": "static",    "title_as_filename": false  &#125;&#125;</code></pre><p><strong>下载飞书文档</strong> - 通过 <code>feishu2md &lt; 你的飞书文档链接 &amp; gt;</code> 直接下载，文档链接可以通过 分享 &gt; 开启链接分享 &gt; 复制链接 获得。</p><p><img src="/static1/boxcn9PzaRWRpqqyUizb3XhtBGc.png"></p><p>直接在 cmd 里输入”feishu2md 飞书文档的 URL”，就可以下载飞书文档为 Markdown 到本地：</p><p><img src="/static1/boxcnkKqzQLXlJQ6Qm2dJncGAT1.png"></p><p>当然，还包括了图片文件，同 md 文件在同一个目录下有一个 static 目录，就是存放了所有的文件，虽然图片文件的命名看不懂，但能保存所有原汁原味的图片文件，不需要自己手工下载和整理，这已经是超级方便啦。</p><p>之后把 md 文件放入_post 中，static 文件夹放入 source 中，就可以直接运行了。</p><h2 id="自动生成的-markdown-图片过大的问题解决方法">5.3. 自动生成的 markdown 图片过大的问题解决方法</h2><p>北冥有鱼发现有些图片在博客中会很大，通过这种方法直接把很大的图片对应的自动生成的 markdown 语法改成 html 的写法就可以了：（尝试了其他方法都不太成功，只能手动这样调整了）</p><p><img src="/static1/boxcnZDHck7QuyxIBdWt9x7CHYd.png"></p><p>好了，有时间再总结一下 github pages 的网页优化速度的问题和 SEO 优化问题。如果觉得对你有帮助，您的打赏是对于我创作的鼓励！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>具体数学第一节</title>
      <link href="/posts/c674.html"/>
      <url>/posts/c674.html</url>
      
        <content type="html"><![CDATA[<h1 id="具体数学第一节">1. 具体数学第一节</h1><h1 id="汉诺塔问题">2. 汉诺塔问题</h1><p>经典河内塔问题中，有 3 根柱子和 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按从大到小依次套在一根柱子上，现在想将所有的圆盘按照原来的位置从一根柱子移动到另一根柱子上，移动过程需要遵守一些规则：</p><p>1.每次只能移动一个盘子</p><p>2.盘子只能从柱子顶端滑出移动到下一根柱子</p><p>3.盘子只能叠在没有盘子的柱子或者比它大的盘子上</p><p>河内塔的规则，限定了较大的圆盘要先转移到目标柱子（选择的任意一根柱子）上，这时直接转移是不可行的，一定要利用其他柱子。问题中只有 3 根柱子，所以，另外一个柱子一定是要将 N-1 个圆盘按照从大到小堆起，（这个柱子我们叫它<strong>cache peg</strong>，<strong>存放柱</strong>），这才使得最大圆盘可以直接从原来位置转移到目标位置。</p><p>假设解决 N 个圆盘的移动需要时间，记 Tn ：</p><p><img src="/static/boxcn1GIYsieYHjLyVbZ005uF5g.png"></p><p><img src="/static/boxcn7yObZ7h5spJEHNKOHiVJLg.png"></p><p><img src="/static/boxcn5Wz0teewkRb82ppKGLAxid.png"></p><p>数学归纳法证明：</p><p><img src="/static/boxcnOKKKJkJlHt8tNHJT5znOog.png"></p><p><img src="/static/boxcnmOTRdSGm09hvS8eBenGkRf.png"></p><h1 id="直线分割平面问题">3. 直线分割平面问题:</h1><p>一：N 条直线分割平面</p><p>假设，x 条线能将平面分为 f(x)份，这对于份 f(n) 第 n 条线，和其他 n-1 条线都有交点时，增加量最大，为 n;</p><p>则： f(n)&#x3D;f(n-1)+n;   f(n-1)&#x3D;f(n-2)+n-1</p><p><img src="/static/boxcnA0DMkzqwcoe3LyJNfzkiAg.png"></p><p>有 f(0)&#x3D;1；得到：n 条直线分割平面的数量最大为：f(n)&#x3D;n*(n+1)&#x2F;2 + 1;</p><!-- ![](static/boxcnIuZVy1gbVYrVc4l5hnfOod.png) --><img src="/static/boxcnIuZVy1gbVYrVc4l5hnfOod.png" width="150" height="150"><p>二. “V” 形线分割平面(折线)</p><p>对于“V”,我们可以把他们当成两条相交直线去掉两条射线。如下图：</p><!-- ![](static/boxcn8Mjca0TrEbNXCGZ2dKkwVg.png) --><img src="/static/boxcn8Mjca0TrEbNXCGZ2dKkwVg.png" width="150" height="150"><p>上图为两条‘V’形线，对于每条‘V’形线，都相当于两条直线去掉后面两条射线，而去掉这两条射线会使平面减少 2，</p><p>因此，有直线公式转化得到： F(n)&#x3D;f(2n)-2n&#x3D;2n(2n+1)&#x2F;2+1-2n;</p><p>三.  ‘N’形线</p><p>N’形线分两种，一种是有两条平行边，二是没有平行边；</p><!-- ![](static/boxcn6LyKy1ZhFwUEcSd6KPWW9b.png) --><img src="/static/boxcn6LyKy1ZhFwUEcSd6KPWW9b.png" width="150" height="150"><p>对于没有平行边的情况：</p><p>我们可以将其看成 3 条直线相交，然后去掉 4 条射线，去掉这 4 条射线后，会使平面相对于 3 条直线减少 6；</p><p>有直线公式可推得：</p><p>f(N)&#x3D;f(3n)-6n&#x3D;3n(3n+1)&#x2F;2+1-6n;</p><p>如果是有平行：</p><p>情况则相对于没有的情况减少一个平面；</p><p>即为： f(N)&#x3D;f(3n)&#x3D;3n(3n+1)&#x2F;2 + 1 - 5n;</p><h1 id="约瑟夫环问题">4. 约瑟夫环问题</h1><p>我们这个规则是这么定的：<br><strong>在一间房间总共有 n 个人（下标 0～n-1），只能有最后一个人活命。</strong></p><p>按照如下规则去排除人：</p><ul><li>所有人围成一圈</li><li>顺时针报数，每次报到 q 的人将被排除掉</li><li>被排除掉的人将从房间内被移走</li><li>然后从被 kill 掉的下一个人重新报数，继续报 q，再清除，直到剩余一人</li></ul><p><strong>你要做的是：当你在这一群人之间时，你必须选择一个位置以使得你变成那剩余的最后一人，也就是活下来。</strong></p><p>当 q &#x3D; 2 时候，是一个特例，能快速求解</p><p><strong>1.思路：注意这里的前提是 n &#x3D; 2^k</strong></p><p>如果只有 2 个人，显然剩余的为 1 号</p><p>如果有 4 个人，第一轮除掉 2,4，剩下 1,3，3 死，留下 1</p><p>如果是 8 个人，先除去 2,4,6,8,之后 3,7，剩下 1,5，除去 5，又剩下 1 了</p><p>我们仔细分析也就是每次除去一半的元素，然后剩余的一半继续重复之前的策略，再除去一半。（可想到递归）</p><p>结合：J(2) &#x3D; 1 我知道两个数，从 1 开始，肯定是 2 先死，剩下 1.</p><p>定义 J(n)为 n 个人构成的约瑟夫环最后结果，则有<strong>j(2^k) &#x3D; 1</strong></p><p><strong>2，假设 n &#x3D; 2^k + t，t 可以随意取，比如 1，2，3…….</strong></p><p>假设 n &#x3D; 11，这时候 n &#x3D; 2^3 + 3，也就是说 t &#x3D; 3，所以开始剔除 3 个元素直到其成为 2^k 问题的约瑟夫问题。</p><p>So，我们在剔除了 t（3）个元素之后（分别是 2,4,6），此时我们定格在 2t+1（7）处，并且将 2t+1（7）作为新的一号，而且这时候的约瑟夫环只剩下 2^3，也就是 J(2^3 + 3) &#x3D; 2*3 (剔除三个)+ 1（2^k 的约瑟夫问题） &#x3D; 7，</p><p>答案为 7</p><p><strong>总结一下这个规律：</strong><br><strong>J(2^k + t) &#x3D; 2t+1</strong></p><p><strong>3,q 不等于 2 的情况下：</strong></p><p>规律：<strong>Jq(n+1) &#x3D; ( Jq(n) + q ) &#x2F; (n+1)</strong></p><p><img src="/static/boxcntrRGY3WXFebbLOE0SIYMKd.png"></p><p>其实就是从 q 开始，到之前最大数 n-1，每个数都减去 q,从 0 开始之后接着 n-1 这个新的值每次往后加 1，直到加到 n-1（这个下标）</p><p><img src="/static/boxcnqIOc5P9oz4HX2rOnsHGrsg.png"></p><p><img src="/static/boxcnqLTZqBrlXR6vNUOYC3fbOb.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
